CVE-2010-1760
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/ChangeLog
@@ -0,0 +1,21 @@
+2010-04-28  Julien Chaffraix  <jchaffraix@webkit.org>
+
+        Reviewed by Alexey Proskuryakov.
+
+        [XHR] Cross-Origin synchronous request with credential raises NETWORK_ERR
+        https://bugs.webkit.org/show_bug.cgi?id=37781
+        <rdar://problem/7905150>
+
+        Test that doing a cross-origin request with a preflight check does
+        not raise a NETWORK_ERR exception and does not send the credentials.
+
+        * http/tests/xmlhttprequest/access-control-preflight-credential-async-expected.txt: Added.
+        * http/tests/xmlhttprequest/access-control-preflight-credential-async.html: Added.
+        * http/tests/xmlhttprequest/access-control-preflight-credential-sync-expected.txt: Added.
+        * http/tests/xmlhttprequest/access-control-preflight-credential-sync.html: Added.
+        * http/tests/xmlhttprequest/resources/basic-auth/access-control-auth-basic.php: Added.
+
+        * platform/mac-tiger/Skipped:
+        * platform/qt/Skipped:
+        Added those 2 tests to the Skipped lists.
+
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/http/tests/xmlhttprequest/access-control-preflight-credential-async-expected.txt
@@ -0,0 +1,4 @@
+Test case for bug 37781: [XHR] Cross-Origin synchronous request with credential raises NETWORK_ERR
+
+PASSED
+
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/http/tests/xmlhttprequest/access-control-preflight-credential-async.html
@@ -0,0 +1,37 @@
+<html>
+<body>
+<p>Test case for bug <a href="https://bugs.webkit.org/show_bug.cgi?id=37781">37781</a>: [XHR] Cross-Origin synchronous request with credential raises NETWORK_ERR</p>
+<pre id='console'></pre>
+<script type="text/javascript">
+function log(message)
+{
+    document.getElementById('console').appendChild(document.createTextNode(message + "\n"));
+}
+
+if (window.layoutTestController) {
+    layoutTestController.dumpAsText();
+    layoutTestController.waitUntilDone();
+}
+
+try {
+    var xhr = new XMLHttpRequest;
+    xhr.open("PUT", "http://localhost:8000/xmlhttprequest/resources/basic-auth/access-control-auth-basic.php?uid=fooUser", false, "fooUser", "barPass");
+    xhr.onerror = function (e) {
+        log("FAILED: received error");
+        if (window.layoutTestController)
+            layoutTestController.notifyDone();
+    };
+    xhr.onreadystatechange = function () {
+        if (xhr.readyState == 4) {
+            log((xhr.status == 401) ? "PASSED" : "FAILED: credential send!");
+            if (window.layoutTestController)
+                layoutTestController.notifyDone();
+        }
+    };
+    xhr.send();
+} catch(e) {
+    log("FAILED: got exception " + e.message);
+}
+</script>
+</body>
+</html>
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/http/tests/xmlhttprequest/access-control-preflight-credential-sync-expected.txt
@@ -0,0 +1,4 @@
+Test case for bug 37781: [XHR] Cross-Origin synchronous request with credential raises NETWORK_ERR
+
+PASSED
+
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/http/tests/xmlhttprequest/access-control-preflight-credential-sync.html
@@ -0,0 +1,37 @@
+<html>
+<body>
+<p>Test case for bug <a href="https://bugs.webkit.org/show_bug.cgi?id=37781">37781</a>: [XHR] Cross-Origin synchronous request with credential raises NETWORK_ERR</p>
+<pre id='console'></pre>
+<script type="text/javascript">
+function log(message)
+{
+    document.getElementById('console').appendChild(document.createTextNode(message + "\n"));
+}
+
+if (window.layoutTestController) {
+    layoutTestController.dumpAsText();
+    layoutTestController.waitUntilDone();
+}
+
+try {
+    var xhr = new XMLHttpRequest;
+    xhr.open("PUT", "http://localhost:8000/xmlhttprequest/resources/basic-auth/access-control-auth-basic.php?uid=fooUser", false, "fooUser", "barPass");
+    xhr.onerror = function (e) {
+        log("FAILED: received error");
+        if (window.layoutTestController)
+            layoutTestController.notifyDone();
+    };
+    xhr.onreadystatechange = function () {
+        if (xhr.readyState == 4) {
+            log((xhr.status == 401) ? "PASSED" : "FAILED: credential send!");
+            if (window.layoutTestController)
+                layoutTestController.notifyDone();
+        }
+    };
+    xhr.send();
+} catch(e) {
+    log("FAILED: got exception " + e.message);
+}
+</script>
+</body>
+</html>
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/http/tests/xmlhttprequest/resources/basic-auth/access-control-auth-basic.php
@@ -0,0 +1,17 @@
+<?php
+
+header("Access-Control-Allow-Origin: http://127.0.0.1:8000/");
+header("Access-Control-Allow-Credentials: true");
+header("Access-Control-Allow-Methods: PUT");
+
+if ($_SERVER['REQUEST_METHOD'] != "OPTIONS") {
+    if (!isset($_SERVER['PHP_AUTH_USER']) || !isset($_REQUEST['uid']) || ($_REQUEST['uid'] != $_SERVER['PHP_AUTH_USER'])) {
+        header('WWW-Authenticate: Basic realm="WebKit Test Realm/Cross Origin"');
+        header('HTTP/1.0 401 Unauthorized');
+        echo 'Authentication canceled';
+        exit;
+    } else {
+        echo "User: {$_SERVER['PHP_AUTH_USER']}, password: {$_SERVER['PHP_AUTH_PW']}.";
+    }
+}
+?>
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/platform/mac-tiger/Skipped
@@ -0,0 +1,5 @@
+
+# https://bugs.webkit.org/show_bug.cgi?id=38265
+# LayoutTests/http/tests/xmlhttprequest/access-control-preflight-credential-[a]sync.html fails on Tiger
+http/tests/xmlhttprequest/access-control-preflight-credential-async.html
+http/tests/xmlhttprequest/access-control-preflight-credential-sync.html
--- /dev/null
+++ b/src/third_party/WebKit/LayoutTests/platform/qt/Skipped
@@ -0,0 +1,2 @@
+http/tests/xmlhttprequest/access-control-preflight-credential-async.html
+http/tests/xmlhttprequest/access-control-preflight-credential-sync.html
--- a/src/third_party/WebKit/WebCore/loader/DocumentThreadableLoader.cpp
+++ b/src/third_party/WebKit/WebCore/loader/DocumentThreadableLoader.cpp
@@ -81,16 +81,19 @@ DocumentThreadableLoader::DocumentThread
     
     ASSERT(m_options.crossOriginRequestPolicy == UseAccessControl);
 
-    if (!m_options.forcePreflight && isSimpleCrossOriginAccessRequest(request.httpMethod(), request.httpHeaderFields()))
-        makeSimpleCrossOriginAccessRequest(request);
+    OwnPtr<ResourceRequest> crossOriginRequest(new ResourceRequest(request));
+    crossOriginRequest->removeCredentials();
+    crossOriginRequest->setAllowCookies(m_options.allowCredentials);
+
+    if (!m_options.forcePreflight && isSimpleCrossOriginAccessRequest(crossOriginRequest->httpMethod(), crossOriginRequest->httpHeaderFields()))
+        makeSimpleCrossOriginAccessRequest(*crossOriginRequest);
     else {
-        m_actualRequest.set(new ResourceRequest(request));
-        m_actualRequest->setAllowCookies(m_options.allowCredentials);
+        m_actualRequest.set(crossOriginRequest.release());
 
-        if (CrossOriginPreflightResultCache::shared().canSkipPreflight(document->securityOrigin()->toString(), request.url(), m_options.allowCredentials, request.httpMethod(), request.httpHeaderFields()))
+        if (CrossOriginPreflightResultCache::shared().canSkipPreflight(document->securityOrigin()->toString(), m_actualRequest->url(), m_options.allowCredentials, m_actualRequest->httpMethod(), m_actualRequest->httpHeaderFields()))
             preflightSuccess();
         else
-            makeCrossOriginAccessRequestWithPreflight(request);
+            makeCrossOriginAccessRequestWithPreflight(*m_actualRequest);
     }
 }
 
@@ -106,8 +109,6 @@ void DocumentThreadableLoader::makeSimpl
 
     // Make a copy of the passed request so that we can modify some details.
     ResourceRequest crossOriginRequest(request);
-    crossOriginRequest.removeCredentials();
-    crossOriginRequest.setAllowCookies(m_options.allowCredentials);
     crossOriginRequest.setHTTPOrigin(m_document->securityOrigin()->toString());
 
     loadRequest(crossOriginRequest, DoSecurityCheck);
@@ -297,6 +298,11 @@ void DocumentThreadableLoader::preflight
 
 void DocumentThreadableLoader::loadRequest(const ResourceRequest& request, SecurityCheckPolicy securityCheck)
 {
+    // Any credential should have been removed from the cross-site requests.
+    const KURL& requestURL = request.url();
+    ASSERT(m_sameOriginRequest || requestURL.user().isEmpty());
+    ASSERT(m_sameOriginRequest || requestURL.pass().isEmpty());
+
     if (m_async) {
         // Don't sniff content or send load callbacks for the preflight request.
         bool sendLoadCallbacks = m_options.sendLoadCallbacks && !m_actualRequest;
@@ -320,15 +326,15 @@ void DocumentThreadableLoader::loadReque
 
     // No exception for file:/// resources, see <rdar://problem/4962298>.
     // Also, if we have an HTTP response, then it wasn't a network error in fact.
-    if (!error.isNull() && !request.url().isLocalFile() && response.httpStatusCode() <= 0) {
+    if (!error.isNull() && !requestURL.isLocalFile() && response.httpStatusCode() <= 0) {
         m_client->didFail(error);
         return;
     }
 
     // FIXME: FrameLoader::loadSynchronously() does not tell us whether a redirect happened or not, so we guess by comparing the
     // request and response URLs. This isn't a perfect test though, since a server can serve a redirect to the same URL that was
-    // requested.
-    if (request.url() != response.url() && !isAllowedRedirect(response.url())) {
+    // requested. Also comparing the request and response URLs as strings will fail if the requestURL still has its credentials.
+    if (requestURL != response.url() && !isAllowedRedirect(response.url())) {
         m_client->didFailRedirectCheck();
         return;
     }
