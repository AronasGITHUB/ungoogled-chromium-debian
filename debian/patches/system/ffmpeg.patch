Description: Don't change the FFmpeg ABI in chromium ...
 ... because it breaks ABI compatibility with the system FFmpeg.
 And don't use private API, which can change at any time.

Author: Andreas Cadhalpun <Andreas.Cadhalpun@googlemail.com>
Last-Update: <2015-07-26>

--- a/media/ffmpeg/ffmpeg_common.h
+++ b/media/ffmpeg/ffmpeg_common.h
@@ -19,20 +19,12 @@
 
 // Include FFmpeg header files.
 extern "C" {
-// Disable deprecated features which result in spammy compile warnings.  This
-// list of defines must mirror those in the 'defines' section of the ffmpeg.gyp
-// file or the headers below will generate different structures.
-#define FF_API_PIX_FMT_DESC 0
-#define FF_API_OLD_DECODE_AUDIO 0
-#define FF_API_DESTRUCT_PACKET 0
-#define FF_API_GET_BUFFER 0
 
 // Temporarily disable possible loss of data warning.
 // TODO(scherkus): fix and upstream the compiler warnings.
 MSVC_PUSH_DISABLE_WARNING(4244);
 #include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
-#include <libavformat/internal.h>
 #include <libavformat/avio.h>
 #include <libavutil/avutil.h>
 #include <libavutil/imgutils.h>
--- a/media/filters/ffmpeg_demuxer.cc
+++ b/media/filters/ffmpeg_demuxer.cc
@@ -843,24 +843,6 @@ void FFmpegDemuxer::OnFindStreamInfoDone
   // If no estimate is found, the stream entry will be kInfiniteDuration().
   std::vector<base::TimeDelta> start_time_estimates(format_context->nb_streams,
                                                     kInfiniteDuration());
-  const AVFormatInternal* internal = format_context->internal;
-  if (internal && internal->packet_buffer &&
-      format_context->start_time != static_cast<int64>(AV_NOPTS_VALUE)) {
-    struct AVPacketList* packet_buffer = internal->packet_buffer;
-    while (packet_buffer != internal->packet_buffer_end) {
-      DCHECK_LT(static_cast<size_t>(packet_buffer->pkt.stream_index),
-                start_time_estimates.size());
-      const AVStream* stream =
-          format_context->streams[packet_buffer->pkt.stream_index];
-      if (packet_buffer->pkt.pts != static_cast<int64>(AV_NOPTS_VALUE)) {
-        const base::TimeDelta packet_pts =
-            ConvertFromTimeBase(stream->time_base, packet_buffer->pkt.pts);
-        if (packet_pts < start_time_estimates[stream->index])
-          start_time_estimates[stream->index] = packet_pts;
-      }
-      packet_buffer = packet_buffer->next;
-    }
-  }
 
   AVStream* audio_stream = NULL;
   AudioDecoderConfig audio_config;
--- a/build/all.gyp
+++ b/build/all.gyp
@@ -136,7 +136,7 @@
             '../third_party/WebKit/public/all.gyp:*',
             '../third_party/cacheinvalidation/cacheinvalidation.gyp:*',
             '../third_party/codesighs/codesighs.gyp:*',
-            '../third_party/ffmpeg/ffmpeg.gyp:*',
+            '../build/linux/unbundle/ffmpeg.gyp:*',
             '../third_party/iccjpeg/iccjpeg.gyp:*',
             '../third_party/libpng/libpng.gyp:*',
             '../third_party/libusb/libusb.gyp:*',
--- a/media/cast/cast_testing.gypi
+++ b/media/cast/cast_testing.gypi
@@ -15,7 +15,7 @@
         'cast_net',
         'cast_receiver',
         '<(DEPTH)/testing/gtest.gyp:gtest',
-        '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+        '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
         '<(DEPTH)/third_party/libyuv/libyuv.gyp:libyuv',
         '<(DEPTH)/third_party/mt19937ar/mt19937ar.gyp:mt19937ar',
         '<(DEPTH)/ui/gfx/gfx.gyp:gfx_geometry',
@@ -220,7 +220,7 @@
         '<(DEPTH)/net/net.gyp:net_test_support',
         '<(DEPTH)/media/media.gyp:media',
         '<(DEPTH)/testing/gtest.gyp:gtest',
-        '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+        '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
         '<(DEPTH)/third_party/opus/opus.gyp:opus',
         '<(DEPTH)/ui/gfx/gfx.gyp:gfx_geometry',
       ],
@@ -243,7 +243,7 @@
         '<(DEPTH)/net/net.gyp:net_test_support',
         '<(DEPTH)/media/media.gyp:media',
         '<(DEPTH)/testing/gtest.gyp:gtest',
-        '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+        '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
         '<(DEPTH)/third_party/opus/opus.gyp:opus',
         '<(DEPTH)/ui/gfx/gfx.gyp:gfx_geometry',
       ],
@@ -356,7 +356,7 @@
             '<(DEPTH)/base/base.gyp:test_support_base',
             '<(DEPTH)/testing/gmock.gyp:gmock',
             '<(DEPTH)/testing/gtest.gyp:gtest',
-            '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
           ],
           'sources': [
             'sender/h264_vt_encoder_unittest.cc',
--- a/media/media.gyp
+++ b/media/media.gyp
@@ -628,7 +628,7 @@
         }],
         ['media_use_ffmpeg==1', {
           'dependencies': [
-            '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '../build/linux/unbundle/ffmpeg.gyp:ffmpeg',
           ],
         }, {  # media_use_ffmpeg==0
           # Exclude the sources that depend on ffmpeg.
@@ -1256,7 +1256,7 @@
         }],
         ['media_use_ffmpeg==1', {
           'dependencies': [
-            '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '../build/linux/unbundle/ffmpeg.gyp:ffmpeg',
           ],
         }, {  # media_use_ffmpeg== 0
           'sources!': [
@@ -1382,7 +1382,7 @@
         }],
         ['media_use_ffmpeg==1', {
           'dependencies': [
-            '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '../build/linux/unbundle/ffmpeg.gyp:ffmpeg',
           ],
         }, {  # media_use_ffmpeg==0
           'sources!': [
@@ -1843,7 +1843,7 @@
             '../base/base.gyp:test_support_base',
             '../testing/gmock.gyp:gmock',
             '../testing/gtest.gyp:gtest',
-            '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '../build/linux/unbundle/ffmpeg.gyp:ffmpeg',
             '../ui/gfx/gfx.gyp:gfx_geometry',
             'media',
             'media_test_support',
--- a/media/media_cdm.gypi
+++ b/media/media_cdm.gypi
@@ -42,7 +42,7 @@
             ['use_ffmpeg == 1'  , {
               'defines': ['CLEAR_KEY_CDM_USE_FFMPEG_DECODER'],
               'dependencies': [
-                '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+                '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
               ],
               'sources': [
                 'cdm/ppapi/external_clear_key/ffmpeg_cdm_audio_decoder.cc',
--- a/third_party/WebKit/Source/core/core.gyp
+++ b/third_party/WebKit/Source/core/core.gyp
@@ -381,7 +381,7 @@
             ],
           },
           'dependencies': [
-            '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
           ],
         }],
        ['"WTF_USE_WEBAUDIO_OPENMAX_DL_FFT=1" in feature_defines', {
@@ -397,7 +397,7 @@
         # Windows shared builder needs extra help for linkage
         ['OS=="win" and "WTF_USE_WEBAUDIO_FFMPEG=1" in feature_defines', {
           'export_dependent_settings': [
-            '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+            '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
           ],
         }],
       ],
--- a/third_party/WebKit/Source/platform/blink_platform.gyp
+++ b/third_party/WebKit/Source/platform/blink_platform.gyp
@@ -406,7 +406,7 @@
           '<(DEPTH)/third_party/ffmpeg',
         ],
         'dependencies': [
-          '<(DEPTH)/third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+          '<(DEPTH)/build/linux/unbundle/ffmpeg.gyp:ffmpeg',
         ],
       }],
       ['"WTF_USE_WEBAUDIO_OPENMAX_DL_FFT=1" in feature_defines', {
--- a/content/content_tests.gypi
+++ b/content/content_tests.gypi
@@ -1569,7 +1569,7 @@
             }, {
               'dependencies': [
                 # Runtime dependencis.
-                '../third_party/ffmpeg/ffmpeg.gyp:ffmpeg',
+                '../build/linux/unbundle/ffmpeg.gyp:ffmpeg',
                 '../third_party/mesa/mesa.gyp:osmesa',
               ],
             }],
