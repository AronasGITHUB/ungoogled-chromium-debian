#!/usr/bin/make -f

# enable verbose build messages
export DH_VERBOSE=1

# enable all build hardening flags
export DEB_BUILD_MAINT_OPTIONS=hardening=+all

# indicate that binary targets do not require root
export DEB_RULES_REQUIRES_ROOT=no

# specify system LLVM (required for unbundling)
# you can set the LLVM_VERSION environment variable before building
# to change the LLVM toolchain version
export LLVM_VERSION?=15
export AR=llvm-ar-$(LLVM_VERSION)
export NM=llvm-nm-$(LLVM_VERSION)
export CC=clang-$(LLVM_VERSION)
export CXX=clang++-$(LLVM_VERSION)

# initial flags from dpkg-buildflags
export DEB_CXXFLAGS_MAINT_STRIP=-g
export CXXFLAGS=$(shell dpkg-buildflags --get CXXFLAGS)

# hack to allow clang to find the default cfi_ignorelist.txt and LLVM tools
# -B<prefix> defined here: https://clang.llvm.org/docs/ClangCommandLineReference.html
RESOURCE_DIR:=$(shell $(CC) --print-resource-dir)
export CXXFLAGS+=-resource-dir=$(RESOURCE_DIR) -B/usr/lib/llvm-$(LLVM_VERSION)/bin
export CPPFLAGS+=-resource-dir=$(RESOURCE_DIR) -B/usr/lib/llvm-$(LLVM_VERSION)/bin
export CFLAGS+=-resource-dir=$(RESOURCE_DIR) -B/usr/lib/llvm-$(LLVM_VERSION)/bin
export LDFLAGS+=-resource-dir=$(RESOURCE_DIR) -B/usr/lib/llvm-$(LLVM_VERSION)/bin

# more verbose linker output
export LDFLAGS+=-Wl,--stats

# set the appropriate cpu architecture
DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)
ifeq (i386,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x86\" use_vaapi=true
endif
ifeq (amd64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"x64\" use_vaapi=true
endif
ifeq (arm64,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm64\" use_vaapi=true
endif
ifeq (armhf,$(DEB_HOST_ARCH))
defines+=host_cpu=\"arm\" use_vaapi=false arm_use_neon=false symbol_level=0
endif

# add gn flags from ungoogled-chromium
defines+=$(shell cat ungoogled-chromium/flags.gn | tr "\n" " " | sed 's/"/\\"/g')
defines+=$(shell cat flags.portable.gn | tr "\n" " " | sed 's/"/\\"/g')

# handle parallel build options
njobs=1
ifneq (,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
njobs=$(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
endif

%:
	dh $@

build/src/out/Release/gn:
	cd build/src && python tools/gn/bootstrap/bootstrap.py -o out/Release/gn --skip-generate-buildfiles -j$(njobs)

override_dh_auto_configure:
	# output compiler information
	$(CXX) --version
	# apply domain substitution
	./debian/scripts/apply_domainsubstitution

override_dh_auto_build-arch: build/src/out/Release/gn
	cd build/src && ./out/Release/gn gen out/Release --args="$(defines)" --fail-on-unused-args
	cd build/src && ninja -j$(njobs) -C out/Release chrome chrome_sandbox chromedriver

override_dh_auto_build-indep: build/src/out/Release/gn
	cd build/src && ./out/Release/gn gen out/Release --args="$(defines)" --fail-on-unused-args
	cd build/src && ninja -j$(njobs) -C out/Release packed_resources

override_dh_prep:
	# building is done by this step; remove domain substitution
	./debian/scripts/revert_domainsubstitution
	dh_prep

override_dh_auto_install-arch:
	cd build/src && cp out/Release/chrome out/Release/chromium
	cd build/src && cp out/Release/chrome_sandbox out/Release/chrome-sandbox
	cd build/src && cp out/Release/locales/en-US.pak out/Release/resources
	cd build/src && chmod 4755 out/Release/chrome-sandbox # suid sandbox
	sed -e s/@@PACKAGE@@/chromium/g -e s/@@MENUNAME@@/Chromium/g \
	    < build/src/chrome/app/resources/manpage.1.in > build/src/out/Release/chromium.1
	dh_auto_install
	# update launcher script with build information
	debian/devutils/update_launcher.sh < debian/scripts/chromium > debian/ungoogled-chromium/usr/bin/chromium
	# move icons into /usr/share
	./debian/scripts/icons

override_dh_auto_install-indep:
	cd build/src && mv out/Release/locales/en-US.pak out/Release/en-US.pak.indepexclude || true
	dh_auto_install

override_dh_fixperms:
	dh_fixperms --exclude chrome-sandbox

override_dh_auto_clean:
	rm -rf build/src/out
	cd build/src && find . -name \*.pyc -execdir rm -f {} \;
	dh_auto_clean
