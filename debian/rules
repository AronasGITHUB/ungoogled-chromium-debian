#!/usr/bin/make -f

DEBIAN_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
DEBIAN_VERSION		:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
DEBIAN_UPSTREAM_VERSION	:= $(shell echo $(DEBIAN_VERSION) | sed 's/^\(.*\)-[^-]*$$/\1/')
DEBIAN_REVISION		:= $(shell echo $(DEBIAN_VERSION) | sed 's/^.*r\([^-]*\)-.*/\1/')

# DEB_TAR_SRCDIR has to be 'src' as this is what gyp expects :(
DEB_TAR_SRCDIR := src
SRC_DIR        := $(CURDIR)/build-tree/$(DEB_TAR_SRCDIR)
DEB_BUILDDIR   := $(SRC_DIR)/build
DEB_SCONS_ARGS := --site-dir=../site_scons

DEBIAN_TESTSUITE := $(DEBIAN_NAME:browser=testsuite)

WANT_DEBUG       := 0
WANT_SYSTEM_LIBS := 0
USE_SYSTEM_SCONS ?= 1
VERBOSE          ?= 0

ifeq (1,$(WANT_DEBUG))
BUILD_TYPE := Debug
else
BUILD_TYPE := Release
# Add symbols
DEB_SCONS_ARGS += SYMBOLS=1
endif
DEB_SCONS_ARGS += --mode=$(BUILD_TYPE)

# Verbose?
ifeq (1,$(VERBOSE))
DEB_SCONS_ARGS += --verbose
endif

# We have some issues with gcc 4.4, use 4.3 for now
AVOID_GCC_44 ?= 1
CC_VERSION   := $(shell gcc -dumpversion | cut -d. -f-2)

ifeq (1,$(AVOID_GCC_44))
ifeq (4.4,$(CC_VERSION))
CC  := gcc-4.3
CXX := g++-4.3
export CC CXX
$(info # CC=$(CC) CXX=$(CXX))
endif
endif

# scons 0.97 (hardy) fails, switch to in-source scons if system scons < 0.98
# scons 1.2.0 (jaunty) is no longer enough since gyp landed
SCONS_VERSION := $(shell grep ^__version__ /usr/bin/scons | cut -d\" -f2)
ifneq (,$(SCONS_VERSION))
ifeq (1,$(USE_SYSTEM_SCONS))
USE_SYSTEM_SCONS := $(shell dpkg --compare-versions $(SCONS_VERSION) lt 1.2.0.d20090113; echo $$?)
endif
else
USE_SYSTEM_SCONS := 0
endif
ifeq (0,$(USE_SYSTEM_SCONS))
SCONS := ../third_party/scons/scons.py
SCONS_VERSION := $(shell grep ^__version__ $(SRC_DIR)/third_party/scons/scons.py | cut -d\" -f2)
endif

include /usr/share/cdbs/1/rules/tarball.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include $(CURDIR)/debian/cdbs/scons.mk

INSTALL_EXCLUDES = \
	lib \
	obj \
	opt \
	dbg \
	.sconsign.dblite \
	linker.lock \
	$(NULL)

TESTS = \
	base_unittests \
	googleurl_unittests \
	media_unittests \
	net_perftests \
	-net_unittests:"Infinite loop in TelnetServerTest.ServerClientSend" \
	-test_shell:"Needs a DISPLAY" \
	-test_shell_tests:"Needs a DISPLAY" \
	unit_tests \
	$(NULL)

# System libs
# - libpng: problem with undefined references to lots of webkit_png_* symbols
# - zlib: symbols are remapped to MOZ_Z_xx for libpng
# - libevent: 2 missing symbols. Too old?
# - sqlite: unit_tests crash in browser/history/text_database.cc
ifeq (1,$(WANT_SYSTEM_LIBS))
SYSTEM_LIBS     = bzip2,libjpeg,libxml,libxslt,lzma_sdk,hunspell
DEB_SCONS_ARGS += SYSTEM_LIBS=$(SYSTEM_LIBS)
endif

# For now, build everything (inc. all test programs)
# DEB_SCONS_ARGS += all

configure/$(DEBIAN_NAME):: debian/configure-stamp

debian/configure-stamp:
	cd $(SRC_DIR) && python tools/gyp/gyp_dogfood build/all.gyp
	touch $@
	# SCONS=$(SCONS) (version $(SCONS_VERSION))
	# DEB_SCONS_ARGS=$(DEB_SCONS_ARGS)

clean::
	rm -f debian/configure-stamp

# Install: there's no install rules in scons yet, do it manually
common-install-prehook-arch::
	mkdir -p debian/tmp/usr/lib/$(DEBIAN_NAME)
	( cd $(SRC_DIR)/sconsbuild/$(BUILD_TYPE) && tar $(foreach excl,$(INSTALL_EXCLUDES),--exclude=$(excl)) -cf - . ) | \
	( cd debian/tmp/usr/lib/$(DEBIAN_NAME) && tar xvf - )

binary-install/$(DEBIAN_NAME)::
	dh_link -p$(DEBIAN_NAME) usr/lib/$(DEBIAN_NAME)/chrome usr/bin/$(DEBIAN_NAME)
	mkdir -p $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/pixmaps
	cp -a build-tree/src/chrome/app/theme/chromium/product_logo_48.png $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).png

# Tests
binary-post-install/$(DEBIAN_TESTSUITE)::
	mkdir -p debian/$(DEBIAN_TESTSUITE)/usr/lib/$(DEBIAN_NAME)/test-results
	cd $(SRC_DIR)/sconsbuild/$(BUILD_TYPE) && \
	for test in $(TESTS) ; do \
		tname=`echo "$$test" | sed -e 's/^-\([^:]*\):.*/\1/'` ; \
		echo "==========================================================================" ; \
		echo -n "# Running '$$tname' " ; \
		echo "(last 100 lines only, visit /usr/lib/$(DEBIAN_NAME)/test-results/$$tname.txt for more)" ; \
		if [ Z"`echo $$test | sed -e 's/^-.*//'`" = Z ] ; then \
			echo "Skipped, reason: "`echo $$test | sed -e 's/^[^:]*://'` ; \
			continue ; \
		fi ; \
		./$$test > $(CURDIR)/debian/$(DEBIAN_TESTSUITE)/usr/lib/$(DEBIAN_NAME)/test-results/$$test.txt 2>&1 || true ; \
		tail -100  $(CURDIR)/debian/$(DEBIAN_TESTSUITE)/usr/lib/$(DEBIAN_NAME)/test-results/$$test.txt ; \
		echo "==========================================================================" ; \
		echo ; \
	done

# Compare
PKG_DIRS = $(addprefix debian/,$(shell grep ^Package debian/control | cut -d' ' -f2))

binary-predeb/$(DEBIAN_NAME):: compare

compare:
	# Look for duplicates, fail if we find any
	@DUPES=`find $(PKG_DIRS) -type f -print | grep -v /DEBIAN/ | cut -d/ -f3- | sort | uniq -c | grep -vE '^  *1 '` ; \
	if [ "Z$$DUPES" != Z ] ; then \
	  echo " => Found duplicates:\n $$DUPES" ; \
	  exit 1 ; \
	else \
	  echo " => No duplicate found" ; \
	fi
	# Find missing
	@find $(PKG_DIRS) -type f -print | grep -v /DEBIAN/ | grep -vE '(/usr/lib/debug|/test-results/)' | \
	  grep usr/lib/$(DEBIAN_NAME) | cut -d/ -f5- | sort > /tmp/pkg-$$$$.indebs ; \
	find debian/tmp/usr/lib/$(DEBIAN_NAME) -type f -print | cut -d/ -f5- | grep -vE '\.log$$' | sort > /tmp/pkg-$$$$.inhammer ; \
	diff -u /tmp/pkg-$$$$.inhammer /tmp/pkg-$$$$.indebs ; \
	if [ $$? -eq 0 ] ; then \
	  echo " => All fine" ; \
	else \
	  echo " => Found differences, please investigate" ; \
	  exit 1 ; \
	fi ; \
	rm -f /tmp/pkg-$$$$.inhammer /tmp/pkg-$$$$.indebs

###############################################################################################

# Tarball (get-orig-source & get-current-source)
GCLIENT_URL  := http://src.chromium.org/svn/trunk/tools/depot_tools
CHROMIUM_URL := http://src.chromium.org/svn/trunk/src
USE_GCLIENT  ?= 0
TMP_DDIR     := $(DEBIAN_NAME)-$(shell echo $$$$)
ifeq (,$(LOCAL_BRANCH))
TMP_DIR      := $(TMP_DDIR)
else
TMP_DIR      := $(LOCAL_BRANCH)
endif

ifneq (,$(DEBIAN_TAG))
get-orig-source: TAG  = $(NULL)
else
get-orig-source: TAG  = -r $(shell svn log --limit 1 $(CHROMIUM_URL) | grep ^r | head -1 | sed -e 's/^r\([^ ]*\).*/\1/')
endif
get-orig-source: gos-all

get-current-source: TAG = -r $(DEBIAN_REVISION)
get-current-source: gos-all

gos-all: gos-co gos-pack
gos-co:
ifeq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DIR)
endif
	@if [ ! -d $(TMP_DIR) ] ; then echo mkdir $(TMP_DIR); mkdir $(TMP_DIR) ; fi
	@if [ ! -d $(TMP_DIR)/tools/depot_tools ] ; then \
	  echo svn co $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	  svn co $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	else \
	  echo svn update $(TMP_DIR)/tools/depot_tools ; \
	  svn update $(TMP_DIR)/tools/depot_tools ; \
	fi
	# Checkout
ifeq (1,$(USE_GCLIENT))
ifneq (,$(TAG))
	$(error gclient doesn't support tags)
endif
	cd $(TMP_DIR) && ./tools/depot_tools/gclient config $(CHROMIUM_URL)
	cd $(TMP_DIR) && ./tools/depot_tools/gclient sync
else
	@if [ ! -d $(TMP_DIR)/src ] ; then \
	  echo svn co $(TAG) $(CHROMIUM_URL) $(TMP_DIR)/src ; \
	  svn co $(TAG) $(CHROMIUM_URL) $(TMP_DIR)/src ; \
	else \
	  echo svn update $(TAG) $(TMP_DIR)/src ; \
	  svn update $(TAG) $(TMP_DIR)/src ; \
	fi
	@for dep in `perl -pe 's,\\$$,\\\\\\$$,g; s,^([a-z]),\\$$$$1,; s,([\]}])$$,$$1;,; s,:$$, => ,; s,:\s*({|"|\[), => $$1,; s, \+ , . ,g; s,@,\\\\@,g; s/Var\("(.*?)"\)/\\$$vars->{"$$1"}/g;' $(TMP_DIR)/src/DEPS | \
	  perl -e 'local $$/ = undef; $$s = <>; eval $$s; for my $$k (sort keys %$$deps) { print "$$k\"$$$$deps{$$k}\n" }'` ; do \
	  OUT=$(TMP_DIR)/`echo $$dep | cut -d\" -f1` ; \
	  if [ ! -d $$OUT ] ; then \
	    echo svn co `echo $$dep | cut -d\" -f2 | sed -e 's,^/,$(CHROMIUM_URL:trunk/src=),'` $$OUT ; \
	    svn co `echo $$dep | cut -d\" -f2 | sed -e 's,^/,$(CHROMIUM_URL:trunk/src=),'` $$OUT ; \
	  else \
	    REV=`echo $$dep | cut -d\" -f2 | grep @ | cut -d@ -f2` ; \
	    if [ "Z$$REV" != Z ] ; then REV="-r $$REV" ; fi ; \
	    echo svn update $$REV $$OUT ; \
	    svn update $$REV $$OUT ; \
	  fi ; \
	done
endif
ifneq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DDIR)
	cp -la $(TMP_DIR) $(TMP_DDIR)
endif
	# Remove binaries
	cd $(TMP_DDIR)/src && find . -type f \( -iname \*.exe -o -iname \*.dll -o -iname \*.pdb \) -exec rm -fv {} \; > REMOVED-bin_only.txt
	
gos-pack: TMP_DIR  = $(TMP_DDIR)
ifneq (,$(DEBIAN_TAG))
gos-pack: VERSION  = $(shell echo $(DEBIAN_TAG) | cut -d= -f2)
else
gos-pack: REVISION = $(shell cd $(TMP_DIR)/src && svn log --xml --limit 1 | grep -E '^( *revision=|<date>)' | tr -d '\n' | \
	             sed -e 's/.*"\([0-9]*\)".*>\(....\)-\(..\)-\(..\)T.*/\2\3\4r\1/')
gos-pack: VERSION  = $(shell cut -d= -f2 $(TMP_DIR)/src/chrome/VERSION | sed -e 's,$$,.,' | tr -d '\n' | sed -e 's/.$$//')~svn$(REVISION)
endif
gos-pack:
	# Pack
	if [ src != $(DEB_TAR_SRCDIR) ] ; then mv $(TMP_DIR)/src $(TMP_DIR)/$(DEB_TAR_SRCDIR) ; fi
	mv $(TMP_DIR)/tools/depot_tools $(TMP_DIR)/$(DEB_TAR_SRCDIR)/depot_tools
	cd $(TMP_DIR) && tar jcf $(DEBIAN_NAME)-$(VERSION)-source.tar.bz2 --exclude=.svn $(DEB_TAR_SRCDIR)
	mkdir $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)
	mv $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)-source.tar.bz2 $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)
	cd $(TMP_DIR) && tar zcf ../$(DEBIAN_NAME)_$(VERSION).orig.tar.gz $(DEBIAN_NAME)-$(VERSION)
	rm -rf $(TMP_DIR)
	@echo "# Done (created $(DEBIAN_NAME)_$(VERSION).orig.tar.gz)"
	@ls -l $(DEBIAN_NAME)_$(VERSION).orig.tar.gz
