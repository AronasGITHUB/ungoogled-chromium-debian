--- a/chrome/browser/host_zoom_map.cc
+++ b/chrome/browser/host_zoom_map.cc
@@ -20,7 +20,11 @@ HostZoomMap::HostZoomMap(Profile* profil
   Load();
   registrar_.Add(this, NotificationType::PROFILE_DESTROYED,
                  Source<Profile>(profile));
-  profile_->GetPrefs()->AddPrefObserver(prefs::kPerHostZoomLevels, this);
+  // Don't observe pref changes (e.g. from sync) in Incognito; once we create
+  // the incognito window it should have no further connection to the main
+  // profile/prefs.
+  if (!profile_->IsOffTheRecord())
+    profile_->GetPrefs()->AddPrefObserver(prefs::kPerHostZoomLevels, this);
 }
 
 void HostZoomMap::Load() {
@@ -72,6 +76,11 @@ void HostZoomMap::SetZoomLevel(const std
       host_zoom_levels_[host] = level;
   }
 
+  // If we're in incognito mode, don't persist changes to the prefs.  We'll keep
+  // them in memory only so they will be forgotten on exiting incognito.
+  if (profile_->IsOffTheRecord())
+    return;
+
   updating_preferences_ = true;
   {
     ScopedPrefUpdate update(profile_->GetPrefs(), prefs::kPerHostZoomLevels);
@@ -111,7 +120,8 @@ void HostZoomMap::Shutdown() {
   registrar_.Remove(this,
                     NotificationType::PROFILE_DESTROYED,
                     Source<Profile>(profile_));
-  profile_->GetPrefs()->RemovePrefObserver(prefs::kPerHostZoomLevels, this);
+  if (!profile_->IsOffTheRecord())
+    profile_->GetPrefs()->RemovePrefObserver(prefs::kPerHostZoomLevels, this);
   profile_ = NULL;
 }
 
--- a/chrome/browser/profile.cc
+++ b/chrome/browser/profile.cc
@@ -440,7 +440,9 @@ class OffTheRecordProfileImpl : public P
   }
 
   virtual HostZoomMap* GetHostZoomMap() {
-    return profile_->GetHostZoomMap();
+    if (!host_zoom_map_)
+      host_zoom_map_ = new HostZoomMap(this);
+    return host_zoom_map_.get();
   }
 
   virtual GeolocationContentSettingsMap* GetGeolocationContentSettingsMap() {
@@ -584,6 +586,9 @@ class OffTheRecordProfileImpl : public P
   // We use a non-writable content settings map for OTR.
   scoped_refptr<HostContentSettingsMap> host_content_settings_map_;
 
+  // Use a separate zoom map for OTR.
+  scoped_refptr<HostZoomMap> host_zoom_map_;
+
   // Use a special WebKit context for OTR browsing.
   scoped_refptr<WebKitContext> webkit_context_;
 
--- a/chrome/browser/renderer_host/resource_message_filter.cc
+++ b/chrome/browser/renderer_host/resource_message_filter.cc
@@ -1053,12 +1053,14 @@ void ResourceMessageFilter::UpdateHostZo
   DCHECK(ChromeThread::CurrentlyOn(ChromeThread::UI));
   host_zoom_map_->SetZoomLevel(host, zoom_level);
 
-  // Notify renderers.
+  // Notify renderers from this profile.
   for (RenderProcessHost::iterator i(RenderProcessHost::AllHostsIterator());
        !i.IsAtEnd(); i.Advance()) {
     RenderProcessHost* render_process_host = i.GetCurrentValue();
-    render_process_host->Send(
-        new ViewMsg_SetZoomLevelForCurrentHost(host, zoom_level));
+    if (render_process_host->profile() == profile_) {
+      render_process_host->Send(
+          new ViewMsg_SetZoomLevelForCurrentHost(host, zoom_level));
+    }
   }
 }
 
