#
# Ubuntu: none
# Upstream: http://codereview.chromium.org/10626
#           http://code.google.com/p/chromium/issues/detail?id=4321
# Description: Allow system libs via a new SYSTEM_LIBS scons variable
#
---
 build/SConscript.main                   |   78 +++++++++++++++++++++++++++-----
 chrome/SConscript                       |    7 ++
 chrome/tools/test/image_diff/SConscript |    2 
 third_party/bzip2/using_bzip2.scons     |    2 
 third_party/libxml/using_libxml.scons   |    4 -
 webkit/tools/test_shell/SConscript      |    4 -
 6 files changed, 79 insertions(+), 18 deletions(-)

Index: chrome/build/SConscript.main
===================================================================
--- chrome.orig/build/SConscript.main
+++ chrome/build/SConscript.main
@@ -24,16 +24,19 @@
     load = load.split(',')
 else:
     load = []
 
 
 root_env = Environment(
     tools = ['component_setup'],
 
+    all_system_libs = [],
+    req_system_libs = [],
+
     CHROME_SRC_DIR = '$MAIN_DIR/..',
     DESTINATION_ROOT = '$MAIN_DIR/Hammer',
     TARGET_ROOT = '$DESTINATION_ROOT',
 
     # Where ComponentTestProgram() will build test executables.
     TESTS_DIR = '$TARGET_ROOT',
 
     # Where ComponentProgram() will build program executables.
@@ -90,16 +93,34 @@
     PERL_INCLUDE_FLAG     = '-I ',
     PERL_INCLUDE_SUFFIX   = '',
     _PERL_INCLUDE_FLAGS   = ('${_concat(PERL_INCLUDE_FLAG, '
                              'PERL_INCLUDE_PATH, '
                              'PERL_INCLUDE_SUFFIX,'
                              '__env__, RDirs, TARGET, SOURCE)}'),
 )
 
+# Requested list of system (shared) libraries, from the comma separated
+# SYSTEM_LIBS variable
+root_env['req_system_libs'] = ARGUMENTS.get('SYSTEM_LIBS')
+if root_env['req_system_libs']:
+  root_env['req_system_libs'] = root_env['req_system_libs'].split(',')
+else:
+  root_env['req_system_libs'] = []
+
+def WantSystemLib(env, lib):
+  """
+  Return true if lib has been requested as a system library in SYSTEM_LIBS.
+  Also store its name into the 'all_system_libs' env variable so it could later be
+  listed as an available system library in the help message.
+  """
+  if lib not in env['all_system_libs']:
+    env['all_system_libs'].append(lib)
+  return (lib in env['req_system_libs'])
+root_env.AddMethod(WantSystemLib, "WantSystemLib")
 
 def ChromeProgram(env, *args, **kw):
   return env.ComponentProgram(*args, **kw)
 root_env.AddMethod(ChromeProgram)
 
 def ChromeTestProgram(env, *args, **kw):
   return env.ComponentTestProgram(*args, **kw)
 root_env.AddMethod(ChromeTestProgram)
@@ -203,27 +224,43 @@
 
 if LoadComponent('skia'):
   sconscripts.append('$SKIA_DIR/SConscript')
 
 if LoadComponent('testing'):
   sconscripts.append('$TESTING_DIR/SConscript.gtest')
 
 if LoadComponent('third_party'):
+  if not root_env.WantSystemLib('bzip2'):
+    sconscripts.append('$BZIP2_DIR/bzip2.scons')
+    root_env.Append(BZIP2_LIB = ['bzip2'])
+  else:
+    root_env.Append(BZIP2_LIB = ['bz2'])
+  if not root_env.WantSystemLib('libpng'):
+    sconscripts.append('$LIBPNG_DIR/libpng.scons')
+  if not root_env.WantSystemLib('libjpeg'):
+    sconscripts.append('$LIBJPEG_DIR/SConscript')
+  if not root_env.WantSystemLib('libxml'):
+    sconscripts.append('$LIBXML_DIR/SConscript')
+    root_env.Append(XML_LIB = ['libxml'])
+  else:
+    root_env.Append(XML_LIB = ['xml2'])
+  if not root_env.WantSystemLib('libxslt'):
+    sconscripts.append('$LIBXSLT_DIR/SConscript')
+  if not root_env.WantSystemLib('lzma_sdk'):
+    sconscripts.append('$LZMA_SDK_DIR/SConscript')
+  if not root_env.WantSystemLib('zlib'):
+    sconscripts.append('$ZLIB_DIR/zlib.scons')
+    root_env.Append(ZLIB_LIB = ['zlib'])
+  else:
+    root_env.Append(ZLIB_LIB = ['z'])
   sconscripts.extend([
       '$BSDIFF_DIR/SConscript',
-      '$BZIP2_DIR/bzip2.scons',
       '$ICU38_DIR/icu38.scons',
-      '$LIBPNG_DIR/libpng.scons',
-      '$LZMA_SDK_DIR/SConscript',
       '$MODP_B64_DIR/modp_b64.scons',
-      '$ZLIB_DIR/zlib.scons',
-      '$LIBJPEG_DIR/SConscript',
-      '$LIBXML_DIR/SConscript',
-      '$LIBXSLT_DIR/SConscript',
       '$BSPATCH_DIR/SConscript',
   ])
 
 if LoadComponent('v8') and root_env.Dir('$CHROME_SRC_DIR/v8').exists():
   sconscripts.append('$OBJ_ROOT/build/SConscript.v8')
 
 if LoadComponent('webkit'):
   sconscripts.append('$WEBKIT_DIR/SConscript')
@@ -508,17 +545,30 @@
   except OSError, e:
     print ('\n'
         'Failed to find a package dependency.  Please install all the\n'
         'packages listed at\n'
         'http://code.google.com/p/chromium/wiki/LinuxBuildInstructions'
         '#Software_Requirements')
 
     sys.exit(1)
-
+  if root_env.WantSystemLib('libxml'):
+    try:
+      linux_env.ParseConfig('pkg-config --cflags --libs libxml-2.0')
+    except OSError, e:
+      print ('\n'
+          'libxml requested in SYSTEM_LIBS but not found\n')
+      sys.exit(1)
+  if root_env.WantSystemLib('libxslt'):
+    try:
+      linux_env.ParseConfig('pkg-config --cflags --libs libxslt')
+    except OSError, e:
+      print ('\n'
+          'libxslt requested in SYSTEM_LIBS but not found\n')
+      sys.exit(1)
 
 # --------------------------------------------------------------------------
 # Mac specific
 
 mac_env = root_env.Clone()
 environment_list.append(mac_env)
 mac_env.Tool('target_platform_mac')
 mac_env.Tool('target_debug')
@@ -549,20 +599,23 @@
         '$GOOGLE_UPDATE_DIR/SConscript',
         '$RLZ_DIR/SConscript',
         '$SANDBOX_DIR/sandbox.scons',
         'build/SConscript.v8',
         '$WEBKIT_DIR/SConscript',
     ],
 )
 
-mac_env.Append(
+if not root_env.WantSystemLib('libevent'):
+  mac_env.Append(
     BUILD_SCONSCRIPTS = [
         '$LIBEVENT_DIR/libevent.scons',
     ],
+  )
+mac_env.Append(
     CFLAGS = [
         '-std=c99',
     ],
     CXXFLAGS = [
         '-fvisibility-inlines-hidden',
         '${str(SOURCE).endswith(".mm") and "-fobjc-gc" or ""}',
     ],
     CCFLAGS = [
@@ -629,32 +682,37 @@
 
 help_fmt = """
 Usage: hammer [SCONS_OPTIONS] [VARIABLES] [TARGET] ...
 
 Supported build variables:
   LOAD=[module,...]         Comma-separated list of components to load in the
                               dependency graph ('-' prefix excludes):
 %s
+  SYSTEM_LIBS=[lib,...]     Comma-separated list of system libraries to link
+                              dynamically (by default they are built in from
+                              included sources):
+%s
   PROGRESS=type             Display a progress indicator:
                               name:  print each evaluated target name
                               spinner:  print a spinner every 5 targets
   VERBOSE=1                 Display full command lines
 """
 
 if GetOption('help'):
   import textwrap
   tw = textwrap.TextWrapper(
     width = 78,
     initial_indent = ' '*32,
     subsequent_indent = ' '*32,
   )
   components = tw.fill(', '.join(components))
+  all_system_libs = tw.fill(', '.join(env['all_system_libs']))
 
-  Help(help_fmt % components)
+  Help(help_fmt % (components, all_system_libs))
 
 
 Import('build_component')
 Default(None)  # Reset default target to empty.
 Default(Alias(build_component))  # Set default target based on where built.
 
 # -------------------------------------------------------------------------
 
Index: chrome/chrome/tools/test/image_diff/SConscript
===================================================================
--- chrome.orig/chrome/tools/test/image_diff/SConscript
+++ chrome/chrome/tools/test/image_diff/SConscript
@@ -17,17 +17,17 @@
         '$LIBPNG_DIR',
         '$CHROME_SRC_DIR',
     ],
     LIBS = [
         'skia',
         'libpng',
         'base_gfx',
         env_test['ICU_LIBS'],  # TODO(sgk):  '$ICU_LIBS' when scons is fixed
-        'zlib',
+        env_test['ZLIB_LIB'],
         'base',
     ],
 )
 
 if env_test['PLATFORM'] == 'win32':
     env_test.Prepend(
         LINKFLAGS = [
             '/INCREMENTAL',
Index: chrome/webkit/tools/test_shell/SConscript
===================================================================
--- chrome.orig/webkit/tools/test_shell/SConscript
+++ chrome/webkit/tools/test_shell/SConscript
@@ -32,24 +32,24 @@
         'base',
         'base_gfx',
         'breakpad_handler',
         'googleurl',
         'net',
         'sdch',
         'skia',
         'gtest',
-        'bzip2',
+        env['BZIP2_LIB'],
         'V8Bindings',
         'WebCore',
         'WTF',
         env['ICU_LIBS'],  # TODO(sgk):  '$ICU_LIBS' when scons is fixed
         'libjpeg',
         'libpng',
-        'libxml',
+        env['XML_LIB'],
         'libxslt',
         'modp_b64',
         'zlib',
         'sqlite',
         'v8',
         'JavaScriptCore_pcre',
         'default_plugin',
     ],
Index: chrome/third_party/bzip2/using_bzip2.scons
===================================================================
--- chrome.orig/third_party/bzip2/using_bzip2.scons
+++ chrome/third_party/bzip2/using_bzip2.scons
@@ -5,11 +5,11 @@
 __doc__ = """
 Settings for other components using the bzip2 library.
 """
 
 Import("env")
 
 env.Append(
     LIBS = [
-        'bzip2',
+        env['BZIP2_LIB'],
     ],
 )
Index: chrome/third_party/libxml/using_libxml.scons
===================================================================
--- chrome.orig/third_party/libxml/using_libxml.scons
+++ chrome/third_party/libxml/using_libxml.scons
@@ -12,17 +12,17 @@
     CPPPATH = [
         '$LIBXML_DIR/include',
         '$LIBXML_DIR/DerivedSources/include',
     ],
     CPPDEFINES = [
         'LIBXML_STATIC',
     ],
     LIBS = [
-        'libxml',
+        env['XML_LIB'],
     ],
 )
 # Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
 
 __doc__ = """
 Settings for other components using the libxml library.
@@ -34,11 +34,11 @@
     CPPPATH = [
         '$LIBXML_DIR/include',
         '$LIBXML_DIR/DerivedSources/include',
     ],
     CPPDEFINES = [
         'LIBXML_STATIC',
     ],
     LIBS = [
-        'libxml',
+        env['XML_LIB'],
     ],
 )
Index: chrome/chrome/SConscript
===================================================================
--- chrome.orig/chrome/SConscript
+++ chrome/chrome/SConscript
@@ -387,20 +387,23 @@
 
 # TODO(port)
   env_test.Object('test/test_file_util.cc',
                   CPPPATH=['..'] + env['CPPPATH'])
 
 sconscript_files = [
     'test/chrome_plugin/SConscript',
     'tools/test/image_diff/SConscript',
-    'third_party/hunspell/SConscript',
-    '$THIRD_PARTY_DIR/sqlite/SConscript',
 ]
 
+if not env.WantSystemLib('hunspell'):
+  sconscript_files.append('third_party/hunspell/SConscript')
+if not env.WantSystemLib('sqlite'):
+  sconscript_files.append('$THIRD_PARTY_DIR/sqlite/SConscript')
+
 # TODO(port)
 if env['PLATFORM'] == 'win32':
   sconscript_files.extend([
       'app/resources/SConscript',
       'app/theme/SConscript',
       'browser/views/SConscript',
       'installer/mini_installer/SConscript',
       'installer/setup/SConscript',
