description: use system valgrind headers

Index: sid/base/third_party/dynamic_annotations/dynamic_annotations.c
===================================================================
--- sid.orig/base/third_party/dynamic_annotations/dynamic_annotations.c
+++ sid/base/third_party/dynamic_annotations/dynamic_annotations.c
@@ -39,7 +39,7 @@
 
 #ifdef __GNUC__
 /* valgrind.h uses gcc extensions so it won't build with other compilers */
-# include "base/third_party/valgrind/valgrind.h"
+# include <valgrind/valgrind.h>
 #endif
 
 /* Compiler-based ThreadSanitizer defines
Index: sid/base/tracked_objects.cc
===================================================================
--- sid.orig/base/tracked_objects.cc
+++ sid/base/tracked_objects.cc
@@ -16,9 +16,10 @@
 #include "base/process/process_handle.h"
 #include "base/profiler/alternate_timer.h"
 #include "base/strings/stringprintf.h"
-#include "base/third_party/valgrind/memcheck.h"
 #include "base/tracking_info.h"
 
+#include <valgrind/memcheck.h>
+
 using base::TimeDelta;
 
 namespace base {
Index: sid/sandbox/linux/services/credentials.cc
===================================================================
--- sid.orig/sandbox/linux/services/credentials.cc
+++ sid/sandbox/linux/services/credentials.cc
@@ -22,9 +22,10 @@
 #include "base/posix/eintr_wrapper.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/template_util.h"
-#include "base/third_party/valgrind/valgrind.h"
 #include "base/threading/thread.h"
 
+#include <valgrind/valgrind.h>
+
 namespace {
 
 bool IsRunningOnValgrind() { return RUNNING_ON_VALGRIND; }
Index: sid/sandbox/linux/services/broker_process.cc
===================================================================
--- sid.orig/sandbox/linux/services/broker_process.cc
+++ sid/sandbox/linux/services/broker_process.cc
@@ -27,10 +27,11 @@
 #include "base/posix/eintr_wrapper.h"
 #include "base/posix/unix_domain_socket_linux.h"
 #include "base/process/process_metrics.h"
-#include "base/third_party/valgrind/valgrind.h"
 #include "build/build_config.h"
 #include "sandbox/linux/services/linux_syscalls.h"
 
+#include <valgrind/valgrind.h>
+
 #if defined(OS_ANDROID) && !defined(MSG_CMSG_CLOEXEC)
 #define MSG_CMSG_CLOEXEC 0x40000000
 #endif
Index: sid/net/spdy/spdy_framer.cc
===================================================================
--- sid.orig/net/spdy/spdy_framer.cc
+++ sid/net/spdy/spdy_framer.cc
@@ -7,12 +7,13 @@
 #include "base/lazy_instance.h"
 #include "base/memory/scoped_ptr.h"
 #include "base/metrics/stats_counters.h"
-#include "base/third_party/valgrind/memcheck.h"
 #include "net/spdy/spdy_frame_builder.h"
 #include "net/spdy/spdy_frame_reader.h"
 #include "net/spdy/spdy_bitmasks.h"
 #include "third_party/zlib/zlib.h"
 
+#include <valgrind/memcheck.h>
+
 using base::StringPiece;
 using std::string;
 using std::vector;
Index: sid/v8/src/ia32/cpu-ia32.cc
===================================================================
--- sid.orig/v8/src/ia32/cpu-ia32.cc
+++ sid/v8/src/ia32/cpu-ia32.cc
@@ -5,7 +5,7 @@
 // CPU specific code for ia32 independent of OS goes here.
 
 #ifdef __GNUC__
-#include "src/third_party/valgrind/valgrind.h"
+#include <valgrind/valgrind.h>
 #endif
 
 #include "src/v8.h"
@@ -34,7 +34,8 @@ void CPU::FlushICache(void* start, size_
   // solution is to run valgrind with --smc-check=all, but this comes at a big
   // performance cost.  We can notify valgrind to invalidate its cache.
 #ifdef VALGRIND_DISCARD_TRANSLATIONS
-  unsigned res = VALGRIND_DISCARD_TRANSLATIONS(start, size);
+  unsigned res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0, VG_USERREQ__DISCARD_TRANSLATIONS,
+                                                 start, size, 0, 0, 0);
   USE(res);
 #endif
 }
Index: sid/v8/src/x64/cpu-x64.cc
===================================================================
--- sid.orig/v8/src/x64/cpu-x64.cc
+++ sid/v8/src/x64/cpu-x64.cc
@@ -5,7 +5,7 @@
 // CPU specific code for x64 independent of OS goes here.
 
 #if defined(__GNUC__) && !defined(__MINGW64__)
-#include "src/third_party/valgrind/valgrind.h"
+#include <valgrind/valgrind.h>
 #endif
 
 #include "src/v8.h"
@@ -34,7 +34,8 @@ void CPU::FlushICache(void* start, size_
   // solution is to run valgrind with --smc-check=all, but this comes at a big
   // performance cost.  We can notify valgrind to invalidate its cache.
 #ifdef VALGRIND_DISCARD_TRANSLATIONS
-  unsigned res = VALGRIND_DISCARD_TRANSLATIONS(start, size);
+  unsigned res = VALGRIND_DO_CLIENT_REQUEST_EXPR(0, VG_USERREQ__DISCARD_TRANSLATIONS,
+                                                 start, size, 0, 0, 0);
   USE(res);
 #endif
 }
Index: sid/sandbox/linux/tests/unit_tests.cc
===================================================================
--- sid.orig/sandbox/linux/tests/unit_tests.cc
+++ sid/sandbox/linux/tests/unit_tests.cc
@@ -14,10 +14,11 @@
 #include "base/debug/leak_annotations.h"
 #include "base/file_util.h"
 #include "base/posix/eintr_wrapper.h"
-#include "base/third_party/valgrind/valgrind.h"
 #include "build/build_config.h"
 #include "sandbox/linux/tests/unit_tests.h"
 
+#include <valgrind/valgrind.h>
+
 namespace {
 std::string TestFailedMessage(const std::string& msg) {
   return msg.empty() ? std::string() : "Actual test failure: " + msg;
