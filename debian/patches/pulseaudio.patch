description: fix pulseaudio messageloop comparisons
author: Michael Gilbert <michael.s.gilbert@gmail.com>
Index: exp/src/media/audio/pulse/pulse_output.cc
===================================================================
--- exp.orig/src/media/audio/pulse/pulse_output.cc	2012-05-19 16:54:04.000000000 +0200
+++ exp/src/media/audio/pulse/pulse_output.cc	2012-05-19 19:40:16.138682353 +0200
@@ -128,7 +128,7 @@
   PulseAudioOutputStream* stream =
       reinterpret_cast<PulseAudioOutputStream*>(stream_addr);
 
-  DCHECK_EQ(stream->manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(stream->manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   stream->write_callback_handled_ = true;
 
@@ -155,7 +155,7 @@
       write_callback_handled_(false),
       ALLOW_THIS_IN_INITIALIZER_LIST(weak_factory_(this)),
       source_callback_(NULL) {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   // TODO(slock): Sanity check input values.
 }
@@ -169,7 +169,7 @@
 }
 
 bool PulseAudioOutputStream::Open() {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   // TODO(slock): Possibly move most of this to an OpenPlaybackDevice function
   // in a new class 'pulse_util', like alsa_util.
@@ -272,7 +272,7 @@
 }
 
 void PulseAudioOutputStream::Close() {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   Reset();
 
@@ -282,7 +282,7 @@
 }
 
 void PulseAudioOutputStream::WaitForWriteRequest() {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   if (stream_stopped_)
     return;
@@ -384,7 +384,7 @@
 }
 
 void PulseAudioOutputStream::Start(AudioSourceCallback* callback) {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
   CHECK(callback);
   DLOG_IF(ERROR, !playback_handle_)
       << "Open() has not been called successfully";
@@ -404,19 +404,19 @@
 }
 
 void PulseAudioOutputStream::Stop() {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   stream_stopped_ = true;
 }
 
 void PulseAudioOutputStream::SetVolume(double volume) {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   volume_ = static_cast<float>(volume);
 }
 
 void PulseAudioOutputStream::GetVolume(double* volume) {
-  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current());
+  DCHECK_EQ(manager_->GetMessageLoop(), MessageLoop::current()->message_loop_proxy());
 
   *volume = volume_;
 }
