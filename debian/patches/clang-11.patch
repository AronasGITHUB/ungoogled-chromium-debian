--- a/base/compiler_specific.h
+++ b/base/compiler_specific.h
@@ -365,12 +365,7 @@
 
 #endif  // defined(__clang_analyzer__)
 
-// Use nomerge attribute to disable optimization of merging multiple same calls.
-#if defined(__clang__) && __has_attribute(nomerge)
-#define NOMERGE [[clang::nomerge]]
-#else
 #define NOMERGE
-#endif
 
 // Marks a type as being eligible for the "trivial" ABI despite having a
 // non-trivial destructor or copy/move constructor. Such types can be relocated
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -350,7 +350,7 @@
     }
 
     if (use_lld) {
-      ldflags += [ "-fuse-ld=lld" ]
+      ldflags += [ "-fuse-ld=lld-11" ]
       if (lld_path != "") {
         ldflags += [ "-B$lld_path" ]
       }
@@ -1249,7 +1249,7 @@
     } else {
       # -ffile-compilation-dir is an alias for both -fdebug-compilation-dir=
       # and -fcoverage-compilation-dir=.
-      cflags += [ "-ffile-compilation-dir=." ]
+      cflags += [ "-fdebug-compilation-dir=." ]
     }
     if (!is_win) {
       # We don't use clang -cc1as on Windows (yet? https://crbug.com/762167)
@@ -2354,13 +2354,6 @@
         "-Xclang",
         "-debug-info-kind=limited",
       ]
-    } else {
-      # Use constructor homing for debug info. This option reduces debug info
-      # by emitting class type info only when constructors are emitted.
-      cflags += [
-        "-Xclang",
-        "-fuse-ctor-homing",
-      ]
     }
   }
   rustflags = [ "-g" ]
--- a/sandbox/linux/services/credentials.cc
+++ b/sandbox/linux/services/credentials.cc
@@ -100,7 +100,9 @@
   // TODO(crbug.com/1247458) Broken in MSan builds after LLVM f1bb30a4956f.
   clone_flags |= CLONE_VM | CLONE_VFORK | CLONE_SETTLS;
 
-  char tls_buf[PTHREAD_STACK_MIN] = {0};
+  long tls_size = PTHREAD_STACK_MIN;
+  char tls_buf[tls_size];
+  __builtin_memset(tls_buf, 0, tls_size);
   tls = tls_buf;
 #endif
 
--- a/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
+++ b/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc
@@ -138,7 +138,7 @@
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const unsigned kSigStackSize = std::max(16384L, (long) SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.
--- a/third_party/blink/renderer/platform/wtf/math_extras.h
+++ b/third_party/blink/renderer/platform/wtf/math_extras.h
@@ -127,11 +127,11 @@
   return g * (1.0f / 400.0f);
 }
 
-constexpr double RoundHalfTowardsPositiveInfinity(double value) {
+inline double RoundHalfTowardsPositiveInfinity(double value) {
   return std::floor(value + 0.5);
 }
 
-constexpr float RoundHalfTowardsPositiveInfinity(float value) {
+inline float RoundHalfTowardsPositiveInfinity(float value) {
   return std::floor(value + 0.5f);
 }
 
