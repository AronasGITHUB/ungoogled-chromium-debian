--- b/media/cast/test/fake_media_source.cc
+++ a/media/cast/test/fake_media_source.cc
@@ -141,7 +141,7 @@
       continue;
     }
 
+    AVCodec* av_codec = avcodec_find_decoder(av_codec_context->codec_id);
-    const AVCodec* av_codec = avcodec_find_decoder(av_codec_context->codec_id);
 
     if (!av_codec) {
       LOG(ERROR) << "Cannot find decoder for the codec: "
@@ -432,7 +432,7 @@
 }
 
 ScopedAVPacket FakeMediaSource::DemuxOnePacket(bool* audio) {
+  ScopedAVPacket packet(new AVPacket());
-  ScopedAVPacket packet = MakeScopedAVPacket();
   if (av_read_frame(av_format_context_, packet.get()) < 0) {
     VLOG(1) << "Failed to read one AVPacket.";
     packet.reset();
--- b/media/cdm/library_cdm/clear_key_cdm/ffmpeg_cdm_audio_decoder.cc
+++ a/media/cdm/library_cdm/clear_key_cdm/ffmpeg_cdm_audio_decoder.cc
@@ -168,7 +168,7 @@
   if (codec_context_->sample_fmt == AV_SAMPLE_FMT_S16P)
     codec_context_->request_sample_fmt = AV_SAMPLE_FMT_S16;
 
+  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
-  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec || avcodec_open2(codec_context_.get(), codec, NULL) < 0) {
     DLOG(ERROR) << "Could not initialize audio decoder: "
                 << codec_context_->codec_id;
@@ -235,16 +235,15 @@
   size_t total_size = 0u;
   std::vector<std::unique_ptr<AVFrame, ScopedPtrAVFreeFrame>> audio_frames;
 
+  AVPacket packet;
+  av_init_packet(&packet);
+  packet.data = const_cast<uint8_t*>(compressed_buffer);
+  packet.size = compressed_buffer_size;
-  AVPacket* packet = av_packet_alloc();
-  packet->data = const_cast<uint8_t*>(compressed_buffer);
-  packet->size = compressed_buffer_size;
 
+  switch (decoding_loop_->DecodePacket(
+      &packet, base::BindRepeating(&FFmpegCdmAudioDecoder::OnNewFrame,
+                                   base::Unretained(this), &total_size,
+                                   &audio_frames))) {
-  FFmpegDecodingLoop::DecodeStatus decode_status = decoding_loop_->DecodePacket(
-      packet,
-      base::BindRepeating(&FFmpegCdmAudioDecoder::OnNewFrame,
-                          base::Unretained(this), &total_size, &audio_frames));
-  av_packet_free(&packet);
-  switch (decode_status) {
     case FFmpegDecodingLoop::DecodeStatus::kSendPacketFailed:
       return cdm::kDecodeError;
     case FFmpegDecodingLoop::DecodeStatus::kFrameProcessingFailed:
--- b/media/ffmpeg/ffmpeg_common.h
+++ a/media/ffmpeg/ffmpeg_common.h
@@ -53,7 +53,8 @@
 
 inline void ScopedPtrAVFreePacket::operator()(void* x) const {
   AVPacket* packet = static_cast<AVPacket*>(x);
+  av_packet_unref(packet);
+  delete packet;
-  av_packet_free(&packet);
 }
 
 inline void ScopedPtrAVFreeContext::operator()(void* x) const {
--- b/media/ffmpeg/ffmpeg_deleters.h
+++ a/media/ffmpeg/ffmpeg_deleters.h
@@ -18,9 +18,9 @@
   void operator()(void* x) const;
 };
 
+// This assumes that the AVPacket being captured was allocated outside of
+// FFmpeg via the new operator.  Do not use this with AVPacket instances that
+// are allocated via malloc() or av_malloc().
-// This assumes that the ScopedAVPacket was created using MakeScopedAVPacket
-// from ffmpeg_demuxer.h. Do not use this with an AVPacket instance that was
-// allocated with new or manually av_malloc'd.
 struct ScopedPtrAVFreePacket {
   void operator()(void* x) const;
 };
--- b/media/filters/android/video_frame_extractor.cc
+++ a/media/filters/android/video_frame_extractor.cc
@@ -119,7 +119,7 @@
 
 ScopedAVPacket VideoFrameExtractor::ReadVideoFrame() {
   AVFormatContext* format_context = glue_->format_context();
+  ScopedAVPacket packet(new AVPacket());
-  ScopedAVPacket packet = MakeScopedAVPacket();
   while (av_read_frame(format_context, packet.get()) >= 0) {
     // Skip frames from streams other than video.
     if (packet->stream_index != video_stream_index_)
--- b/media/filters/audio_decoder_unittest.cc
+++ a/media/filters/audio_decoder_unittest.cc
@@ -109,7 +109,7 @@
   }
 
   // If the timestamp is positive, try to use FFmpeg's discard data.
+  int skip_samples_size = 0;
-  size_t skip_samples_size = 0;
   const uint32_t* skip_samples_ptr =
       reinterpret_cast<const uint32_t*>(av_packet_get_side_data(
           packet, AV_PKT_DATA_SKIP_SAMPLES, &skip_samples_size));
--- b/media/filters/audio_file_reader.cc
+++ a/media/filters/audio_file_reader.cc
@@ -86,7 +86,7 @@
 }
 
 bool AudioFileReader::OpenDecoder() {
+  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
-  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (codec) {
     // MP3 decodes to S16P which we don't support, tell it to use S16 instead.
     if (codec_context_->sample_fmt == AV_SAMPLE_FMT_S16P)
--- b/media/filters/ffmpeg_aac_bitstream_converter_unittest.cc
+++ a/media/filters/ffmpeg_aac_bitstream_converter_unittest.cc
@@ -59,7 +59,7 @@
     dummy_packet[i] = i & 0xFF; // Repeated sequences of 0-255
   }
 
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   CreatePacket(test_packet.get(), dummy_packet,
                sizeof(dummy_packet));
 
@@ -91,7 +91,7 @@
   EXPECT_FALSE(converter.ConvertPacket(NULL));
 
   // Create new packet to test actual conversion.
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   CreatePacket(test_packet.get(), dummy_packet, sizeof(dummy_packet));
 
   // Try out the actual conversion. This should fail due to missing extradata.
@@ -103,7 +103,7 @@
 
   uint8_t dummy_packet[1000] = {0};
 
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   CreatePacket(test_packet.get(), dummy_packet,
                sizeof(dummy_packet));
 
@@ -142,7 +142,7 @@
 
   uint8_t dummy_packet[1000];
 
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   CreatePacket(test_packet.get(), dummy_packet,
                sizeof(dummy_packet));
 
@@ -158,7 +158,7 @@
   EXPECT_EQ(frame_length, test_packet->size);
 
   // Create a second packet that is 1 byte smaller than the first one
+  ScopedAVPacket second_test_packet(new AVPacket());
-  ScopedAVPacket second_test_packet = MakeScopedAVPacket();
   CreatePacket(second_test_packet.get(), dummy_packet,
                sizeof(dummy_packet) - 1);
 
--- b/media/filters/ffmpeg_audio_decoder.cc
+++ a/media/filters/ffmpeg_audio_decoder.cc
@@ -167,27 +167,26 @@
 }
 
 bool FFmpegAudioDecoder::FFmpegDecode(const DecoderBuffer& buffer) {
+  AVPacket packet;
+  av_init_packet(&packet);
-  AVPacket* packet = av_packet_alloc();
   if (buffer.end_of_stream()) {
+    packet.data = NULL;
+    packet.size = 0;
-    packet->data = NULL;
-    packet->size = 0;
   } else {
+    packet.data = const_cast<uint8_t*>(buffer.data());
+    packet.size = buffer.data_size();
-    packet->data = const_cast<uint8_t*>(buffer.data());
-    packet->size = buffer.data_size();
 
+    DCHECK(packet.data);
+    DCHECK_GT(packet.size, 0);
-    DCHECK(packet->data);
-    DCHECK_GT(packet->size, 0);
   }
 
   bool decoded_frame_this_loop = false;
   // base::Unretained and std::cref are safe to use with the callback given
   // to DecodePacket() since that callback is only used the function call.
+  switch (decoding_loop_->DecodePacket(
+      &packet, base::BindRepeating(&FFmpegAudioDecoder::OnNewFrame,
+                                   base::Unretained(this), std::cref(buffer),
+                                   &decoded_frame_this_loop))) {
-  FFmpegDecodingLoop::DecodeStatus decode_status = decoding_loop_->DecodePacket(
-      packet, base::BindRepeating(&FFmpegAudioDecoder::OnNewFrame,
-                                  base::Unretained(this), std::cref(buffer),
-                                  &decoded_frame_this_loop));
-  av_packet_free(&packet);
-  switch (decode_status) {
     case FFmpegDecodingLoop::DecodeStatus::kSendPacketFailed:
       MEDIA_LOG(ERROR, media_log_)
           << "Failed to send audio packet for decoding: "
@@ -331,7 +330,7 @@
     }
   }
 
+  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
-  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec ||
       avcodec_open2(codec_context_.get(), codec, &codec_options) < 0) {
     DLOG(ERROR) << "Could not initialize audio decoder: "
--- b/media/filters/ffmpeg_demuxer.cc
+++ a/media/filters/ffmpeg_demuxer.cc
@@ -50,7 +50,6 @@
 #include "media/formats/webm/webm_crypto_helpers.h"
 #include "media/media_buildflags.h"
 #include "third_party/ffmpeg/ffmpeg_features.h"
-#include "third_party/ffmpeg/libavcodec/packet.h"
 
 #if BUILDFLAG(ENABLE_PLATFORM_HEVC)
 #include "media/filters/ffmpeg_h265_to_annex_b_bitstream_converter.h"
@@ -67,11 +66,6 @@
 
 }  // namespace
 
-ScopedAVPacket MakeScopedAVPacket() {
-  ScopedAVPacket packet(av_packet_alloc());
-  return packet;
-}
-
 static base::Time ExtractTimelineOffset(
     container_names::MediaContainerName container,
     const AVFormatContext* format_context) {
@@ -427,11 +421,11 @@
   scoped_refptr<DecoderBuffer> buffer;
 
   if (type() == DemuxerStream::TEXT) {
+    int id_size = 0;
-    size_t id_size = 0;
     uint8_t* id_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_WEBVTT_IDENTIFIER, &id_size);
 
+    int settings_size = 0;
-    size_t settings_size = 0;
     uint8_t* settings_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_WEBVTT_SETTINGS, &settings_size);
 
@@ -443,7 +437,7 @@
     buffer = DecoderBuffer::CopyFrom(packet->data, packet->size,
                                      side_data.data(), side_data.size());
   } else {
+    int side_data_size = 0;
-    size_t side_data_size = 0;
     uint8_t* side_data = av_packet_get_side_data(
         packet.get(), AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL, &side_data_size);
 
@@ -504,7 +498,7 @@
                                        packet->size - data_offset);
     }
 
+    int skip_samples_size = 0;
-    size_t skip_samples_size = 0;
     const uint32_t* skip_samples_ptr =
         reinterpret_cast<const uint32_t*>(av_packet_get_side_data(
             packet.get(), AV_PKT_DATA_SKIP_SAMPLES, &skip_samples_size));
@@ -1794,9 +1788,9 @@
   }
 
   // Allocate and read an AVPacket from the media. Save |packet_ptr| since
+  // evaluation order of packet.get() and base::Passed(&packet) is
-  // evaluation order of packet.get() and std::move(&packet) is
   // undefined.
+  ScopedAVPacket packet(new AVPacket());
-  ScopedAVPacket packet = MakeScopedAVPacket();
   AVPacket* packet_ptr = packet.get();
 
   pending_read_ = true;
--- b/media/filters/ffmpeg_demuxer.h
+++ a/media/filters/ffmpeg_demuxer.h
@@ -62,10 +62,6 @@
 
 typedef std::unique_ptr<AVPacket, ScopedPtrAVFreePacket> ScopedAVPacket;
 
-// Use av_packet_alloc() to create a packet, which is scoped to delete with
-// av_packet_free at the end of it's lifetime.
-MEDIA_EXPORT ScopedAVPacket MakeScopedAVPacket();
-
 class MEDIA_EXPORT FFmpegDemuxerStream : public DemuxerStream {
  public:
   // Attempts to create FFmpegDemuxerStream form the given AVStream. Will return
--- b/media/filters/ffmpeg_glue.cc
+++ a/media/filters/ffmpeg_glue.cc
@@ -89,6 +89,9 @@
   // Enable fast, but inaccurate seeks for MP3.
   format_context_->flags |= AVFMT_FLAG_FAST_SEEK;
 
+  // Ensures we can read out various metadata bits like vp8 alpha.
+  format_context_->flags |= AVFMT_FLAG_KEEP_SIDE_DATA;
+
   // Ensures format parsing errors will bail out. From an audit on 11/2017, all
   // instances were real failures. Solves bugs like http://crbug.com/710791.
   format_context_->error_recognition |= AV_EF_EXPLODE;
--- b/media/filters/ffmpeg_h264_to_annex_b_bitstream_converter_unittest.cc
+++ a/media/filters/ffmpeg_h264_to_annex_b_bitstream_converter_unittest.cc
@@ -304,7 +304,7 @@
 TEST_F(FFmpegH264ToAnnexBBitstreamConverterTest, Conversion_Success) {
   FFmpegH264ToAnnexBBitstreamConverter converter(&test_parameters_);
 
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   CreatePacket(test_packet.get(), kPacketDataOkWithFieldLen4,
                sizeof(kPacketDataOkWithFieldLen4));
 
@@ -319,7 +319,7 @@
   FFmpegH264ToAnnexBBitstreamConverter converter(&test_parameters_);
 
   // Create new packet with 1000 excess bytes.
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   static uint8_t excess_data[sizeof(kPacketDataOkWithFieldLen4) + 1000] = {0};
   memcpy(excess_data, kPacketDataOkWithFieldLen4,
          sizeof(kPacketDataOkWithFieldLen4));
@@ -343,7 +343,7 @@
   EXPECT_FALSE(converter.ConvertPacket(nullptr));
 
   // Create new packet to test actual conversion.
+  ScopedAVPacket test_packet(new AVPacket());
-  ScopedAVPacket test_packet = MakeScopedAVPacket();
   CreatePacket(test_packet.get(), kPacketDataOkWithFieldLen4,
                sizeof(kPacketDataOkWithFieldLen4));
 
--- b/media/filters/ffmpeg_video_decoder.cc
+++ a/media/filters/ffmpeg_video_decoder.cc
@@ -339,27 +339,25 @@
 bool FFmpegVideoDecoder::FFmpegDecode(const DecoderBuffer& buffer) {
   // Create a packet for input data.
   // Due to FFmpeg API changes we no longer have const read-only pointers.
+  AVPacket packet;
+  av_init_packet(&packet);
-  // av_init_packet is deprecated and being removed, and ffmpeg clearly does
-  // not want to allow on-stack allocation of AVPackets.
-  AVPacket* packet = av_packet_alloc();
   if (buffer.end_of_stream()) {
+    packet.data = NULL;
+    packet.size = 0;
-    packet->data = NULL;
-    packet->size = 0;
   } else {
+    packet.data = const_cast<uint8_t*>(buffer.data());
+    packet.size = buffer.data_size();
-    packet->data = const_cast<uint8_t*>(buffer.data());
-    packet->size = buffer.data_size();
 
+    DCHECK(packet.data);
+    DCHECK_GT(packet.size, 0);
-    DCHECK(packet->data);
-    DCHECK_GT(packet->size, 0);
 
     // Let FFmpeg handle presentation timestamp reordering.
     codec_context_->reordered_opaque = buffer.timestamp().InMicroseconds();
   }
+
+  switch (decoding_loop_->DecodePacket(
+      &packet, base::BindRepeating(&FFmpegVideoDecoder::OnNewFrame,
+                                   base::Unretained(this)))) {
-  FFmpegDecodingLoop::DecodeStatus decode_status = decoding_loop_->DecodePacket(
-      packet, base::BindRepeating(&FFmpegVideoDecoder::OnNewFrame,
-                                  base::Unretained(this)));
-  av_packet_free(&packet);
-  switch (decode_status) {
     case FFmpegDecodingLoop::DecodeStatus::kSendPacketFailed:
       MEDIA_LOG(ERROR, media_log_)
           << "Failed to send video packet for decoding: "
@@ -426,7 +424,7 @@
   if (decode_nalus_)
     codec_context_->flags2 |= AV_CODEC_FLAG2_CHUNKS;
 
+  AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
-  const AVCodec* codec = avcodec_find_decoder(codec_context_->codec_id);
   if (!codec || avcodec_open2(codec_context_.get(), codec, NULL) < 0) {
     ReleaseFFmpegResources();
     return false;
--- b/media/filters/media_file_checker.cc
+++ a/media/filters/media_file_checker.cc
@@ -68,7 +68,7 @@
       auto context = AVStreamToAVCodecContext(format_context->streams[i]);
       if (!context)
         continue;
+      AVCodec* codec = avcodec_find_decoder(cp->codec_id);
-      const AVCodec* codec = avcodec_find_decoder(cp->codec_id);
       if (codec && avcodec_open2(context.get(), codec, nullptr) >= 0) {
         auto loop = std::make_unique<FFmpegDecodingLoop>(context.get());
         stream_contexts[i] = {std::move(context), std::move(loop)};
