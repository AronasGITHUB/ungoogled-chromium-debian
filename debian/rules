#!/usr/bin/make -f

DEBIAN_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
DEBIAN_VERSION		:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
DEBIAN_UPSTREAM_VERSION	:= $(shell echo $(DEBIAN_VERSION) | sed 's/^\(.*\)-[^-]*$$/\1/')
DEBIAN_REVISION		:= $(shell echo $(DEBIAN_VERSION) | sed 's/^.*r\([^-]*\)-.*/\1/')

# DEB_TAR_SRCDIR has to be 'src' as this is what gyp expects :(
DEB_TAR_SRCDIR := src
SRC_DIR        := $(CURDIR)/build-tree/$(DEB_TAR_SRCDIR)
LIB_DIR        := usr/lib/$(DEBIAN_NAME)
DEB_BUILDDIR   := $(SRC_DIR)/build
DEB_SCONS_ARGS := --site-dir=../site_scons --keep-going

DEBIAN_TESTSUITE := $(DEBIAN_NAME:browser=testsuite)

WANT_LZMA_SRC    ?= 1
WANT_LZMA_DEBS   ?= 0
WANT_DEBUG       := 0
WANT_SYSTEM_LIBS ?= 1
WANT_SHARED_LIBS ?= 0
WANT_SANDBOXING  ?= 1
USE_SYSTEM_SCONS ?= 1
USE_SYSTEM_V8    ?= 0
VERBOSE          ?= 0

ifeq (x86_64,$(DEB_BUILD_GNU_CPU))
GYP_DEFINES += target_arch=x64
endif

# enable this if you dont want all your cores to get drowned by 
# chromium build
# NUMBER_OF_PROCESSORS=1
# export NUMBER_OF_PROCESSORS

# Don't let dh_installinit install *.default in /etc/default
DEB_DH_INSTALLINIT_ARGS += --noscripts --onlyscripts

# Use lzma instead of gzip inside the debs (passed to dpkg-deb)
ifeq (1,$(WANT_LZMA_DEBS))
DEB_DH_BUILDDEB_ARGS += -- -Z lzma
endif

ifeq (1,$(WANT_DEBUG))
BUILD_TYPE := Debug
else
BUILD_TYPE := Release
# Add symbols
DEB_SCONS_ARGS += SYMBOLS=1
endif
DEB_SCONS_ARGS += --mode=$(BUILD_TYPE)

# Verbose?
ifeq (1,$(VERBOSE))
DEB_SCONS_ARGS += --verbose
endif

# Shared libraries
ifeq (1,$(WANT_SHARED_LIBS))
GYP_DEFINES += library=shared_library
endif

CC_VERSION   := $(shell gcc -dumpversion | cut -d. -f-2)

ifeq (4.4,$(CC_VERSION))
GYP_DEFINES += no_strict_aliasing=1 gcc_version=44
endif

# scons 0.97 (hardy) and 0.98.5 (intrepid) fail, switch to in-source scons if system scons < 1.2.0
SCONS_VERSION := $(shell grep ^__version__ /usr/bin/scons | cut -d\" -f2)
ifneq (,$(SCONS_VERSION))
ifeq (1,$(USE_SYSTEM_SCONS))
USE_SYSTEM_SCONS := $(shell dpkg --compare-versions $(SCONS_VERSION) lt 1.2.0; echo $$?)
endif
else
USE_SYSTEM_SCONS := 0
endif
ifeq (0,$(USE_SYSTEM_SCONS))
SCONS := ../third_party/scons/scons.py
SCONS_VERSION = $(shell grep ^__version__ $(SRC_DIR)/third_party/scons/scons.py | cut -d\" -f2)
endif

ifeq (1,$(WANT_LZMA_SRC))
TAR_EXT   := lzma
TAR_FLAGS := --lzma
DEB_TARBALL = $(wildcard *.tar.bz2 *.tar.$(TAR_EXT))
else
TAR_EXT   := bz2
TAR_FLAGS := -j
endif

include $(CURDIR)/debian/cdbs/tarball.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include $(CURDIR)/debian/cdbs/scons.mk

INSTALL_EXCLUDES = \
	lib \
	obj \
	opt \
	dbg \
	.sconsign.dblite \
	linker.lock \
	convert_dict \
	chrome-wrapper \
	product_logo_48.png \
	libnpapi_layout_test_plugin.so \
	libnpapi_test_plugin.so \
	plugins \
	$(NULL)

# List of tests
# - prefix the name with a "-" to disable the test suite completely and
#   append a reason after a ":"
# - prefix the name with a "@" to run the test suite in xvfb-run (fake
#   X server for machines with no display hardware and no physical input
#   devices).
# - to disable one or more tests within a given testsuite,
#   append the names of the tests (using the Google Test filter syntax)
TESTS = \
	@app_unittests:-FontTest.LoadArial \
	base_unittests \
	googleurl_unittests \
	ipc_tests \
	media_unittests \
	net_perftests \
	net_unittests:-HttpNetworkLayerTest.GoogleGET:TelnetServerTest.* \
	@page_cycler_tests \
	perf_tests \
	printing_unittests \
	@startup_tests \
	@test_shell_tests \
	@ui_tests \
	unit_tests \
	$(NULL)

# FFmpeg-mt
GYP_DEFINES += use_system_ffmpeg=1

USE_SYSTEM_SQLITE := $(shell pkg-config 'sqlite3 >= 3.6.1' && echo 1 || echo 0)

# System libs
ifeq (1,$(WANT_SYSTEM_LIBS))
GYP_DEFINES += \
	use_system_bzip2=1 \
	use_system_zlib=1 \
	use_system_libjpeg=1 \
	use_system_libpng=1 \
	use_system_sqlite=$(USE_SYSTEM_SQLITE) \
	use_system_libxml=1 \
	use_system_libxslt=1 \
	$(NULL)
endif

# Build everything (like All), including test programs but minus things we don't
# want (breakpad, courgette, ..) or don't need (the other small tools)
DEB_SCONS_ARGS += \
	chrome \
	chrome_sandbox \
	app_unittests \
	base_unittests \
	browser_tests \
	googleurl_unittests \
	ipc_tests \
	media_unittests \
	memory_test \
	net_perftests \
	net_unittests \
	page_cycler_tests \
	perf_tests \
	printing_unittests \
	startup_tests \
	tab_switching_test \
	test_shell_tests \
	ui_tests \
	unit_tests \
	url_fetch_test \
	wav_ola_test \
	$(NULL)

ifeq (1,$(WANT_SANDBOXING))
GYP_DEFINES += \
	linux_sandbox_path=/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox \
	linux_sandbox_chrome_path=/$(LIB_DIR)/$(DEBIAN_NAME) \
	$(NULL)

# needed to preserve the suid and make the sandbox happy
DEB_FIXPERMS_EXCLUDE := $(DEBIAN_NAME)-sandbox
endif

# use system v8
ifeq (1,$(USE_SYSTEM_V8))
GYP_DEFINES += \
	javascript_engine=system-v8 \
	$(NULL)
endif


configure/$(DEBIAN_NAME):: debian/configure-stamp

debian/configure-stamp:
ifneq (,$(GYP_DEFINES))
	cd $(SRC_DIR) && GYP_DEFINES="$(GYP_DEFINES)" python tools/gyp/gyp_chromium build/all.gyp
else
	cd $(SRC_DIR) && python tools/gyp/gyp_chromium build/all.gyp
endif
	touch $@
	# Populate the LASTCHANGE file template as we no longer have the VCS
	# files at this point
	echo $(DEBIAN_REVISION) > $(SRC_DIR)/build/LASTCHANGE.in
	# SCONS=$(SCONS) (version $(SCONS_VERSION))
	# DEB_SCONS_ARGS=$(DEB_SCONS_ARGS)

clean::
	rm -f debian/configure-stamp

# Install: there's no install rules in scons yet, do it manually
common-install-prehook-impl::
	mkdir -p debian/tmp/$(LIB_DIR)
	( cd $(SRC_DIR)/sconsbuild/$(BUILD_TYPE) && tar $(foreach excl,$(INSTALL_EXCLUDES),--exclude=$(excl)) -cf - . ) | \
	( cd debian/tmp/$(LIB_DIR) && tar xvf - )
	# Launcher script
	mkdir -p debian/tmp/usr/bin
	cp -a debian/$(DEBIAN_NAME).sh debian/tmp/usr/bin/$(DEBIAN_NAME)
	chmod 755 debian/tmp/usr/bin/$(DEBIAN_NAME)
	# Preferences
	mkdir -p debian/tmp/etc/$(DEBIAN_NAME)
	cp -a debian/$(DEBIAN_NAME).default debian/tmp/etc/$(DEBIAN_NAME)/default
	# Rename the binary from chrome to $(DEBIAN_NAME), this is required
	# as chromium dereferences all symlinks before starting its children
	# making the Gnome System Monitor confused with icons
	mv debian/tmp/$(LIB_DIR)/chrome debian/tmp/$(LIB_DIR)/$(DEBIAN_NAME)
	mv debian/tmp/$(LIB_DIR)/chrome_sandbox debian/tmp/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
	# Manpage
	dh_installman -pchromium-browser debian/tmp/$(LIB_DIR)/chromium-browser.1
	rm -f debian/tmp/$(LIB_DIR)/chromium-browser.1

binary-install/$(DEBIAN_NAME)::
	mkdir -p $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/pixmaps
	cp -a build-tree/src/chrome/app/theme/chromium/product_logo_48.png $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).png
	for size in 16 32 48 256 ; do \
	  mkdir -p $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/$${size}x$${size}/apps ; \
	  cp -a build-tree/src/chrome/app/theme/chromium/product_logo_$$size.png  \
	    $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/$${size}x$${size}/apps/$(DEBIAN_NAME).png ; \
	done
ifeq (1,$(WANT_SANDBOXING))
	chmod 4755 $(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
else
	rm -vf $(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
endif
	# Locales: only keep en-US in the main deb
	cd $(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)/locales && \
	  rm -f $(filter-out en-US.pak,$(notdir $(wildcard $(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)/locales/*)))
	# DEB_ARCH_PACKAGES=$(DEB_ARCH_PACKAGES)
	# DEB_INDEP_PACKAGES=$(DEB_INDEP_PACKAGES)
ifneq (i386,$(DEB_BUILD_ARCH_CPU))
	# DEB_BUILD_ARCH_CPU=$(DEB_BUILD_ARCH_CPU)
	# We assume we're *not* doing the "Architecture: all" packages so we need
	# to drop the -l10n files from debian/tmp to make 'compare' happy
	cd $(CURDIR)/debian/tmp/$(LIB_DIR)/locales && \
	  rm $(filter-out en-US.pak,$(notdir $(wildcard $(CURDIR)/debian/tmp/$(LIB_DIR)/locales/*)))
	# same for inspector
	rm -rf $(CURDIR)/debian/tmp/$(LIB_DIR)/resources/inspector/*
endif

binary-install/$(DEBIAN_NAME)-l10n::
	rm $(CURDIR)/debian/$(DEBIAN_NAME)-l10n/$(LIB_DIR)/locales/en-US.pak

# Tests
binary-post-install/$(DEBIAN_TESTSUITE)::
	######################### TESTS ######################################
	# Run all possible tests from the chromium testsuite
	# Full results could be found in the '$(DEBIAN_TESTSUITE)' package
	# under /$(LIB_DIR)/test-results
	# Buildd doesn't allow network accesses so the corresponding
	# tests have to be skipped
	@chmod u+x $(CURDIR)/debian/run-test.sh
	@mkdir -p debian/$(DEBIAN_TESTSUITE)/$(LIB_DIR)/test-results
	@cd $(SRC_DIR)/sconsbuild/$(BUILD_TYPE) && \
	for test in $(TESTS) ; do \
		tname=`echo "$$test" | sed -e 's/^[-@]\?\([^:]*\).*/\1/'` ; \
		filter=`echo "$$test" | sed -e 's/^[^-][^:]*://' | grep -v -- "$$test"` ; \
		echo "==========================================================================" ; \
		if [ Z"`echo $$test | sed -e 's/^-.*//'`" = Z ] ; then \
			echo "Skipped '$$tname', reason: "`echo $$test | sed -e 's/^[^:]*://'` ; \
			continue ; \
		fi ; \
		OPT="" ; \
		if [ Z"`echo $$test | sed -e 's/^@.*//'`" = Z ] ; then \
			OPT=-x ; \
		fi ; \
		$(CURDIR)/debian/run-test.sh $$OPT ./$$tname $(CURDIR)/debian/$(DEBIAN_TESTSUITE)/$(LIB_DIR)/test-results/ $$filter || true ; \
		echo "==========================================================================" ; \
		echo ; \
	done

# Compare
PKG_DIRS = $(addprefix debian/,$(shell grep ^Package debian/control | cut -d' ' -f2))

binary-predeb/$(DEBIAN_NAME):: compare

compare:
	# Look for duplicates, fail if we find any
	@DUPES=`find $(PKG_DIRS) -type f -print | grep -v /DEBIAN/ | cut -d/ -f3- | sort | uniq -c | grep -vE '^  *1 '` ; \
	if [ "Z$$DUPES" != Z ] ; then \
	  echo " => Found duplicates:\n $$DUPES" ; \
	  exit 1 ; \
	else \
	  echo " => No duplicate found" ; \
	fi
	# Find missing
	@find $(PKG_DIRS) -type f -print | grep -v /DEBIAN/ | grep -vE '(/usr/lib/debug|/test-results/|/locales/|/inspector/)' | \
	  grep $(LIB_DIR) | cut -d/ -f5- | sort > /tmp/pkg-$$$$.indebs ; \
	find debian/tmp/$(LIB_DIR) -type f -print | cut -d/ -f5- | grep -vE '(\.log$$|/locales/|/inspector/)' | sort > /tmp/pkg-$$$$.inhammer ; \
	diff -u /tmp/pkg-$$$$.inhammer /tmp/pkg-$$$$.indebs ; \
	if [ $$? -eq 0 ] ; then \
	  echo " => All fine" ; \
	else \
	  echo " => Found differences, please investigate" ; \
	  exit 1 ; \
	fi ; \
	rm -f /tmp/pkg-$$$$.inhammer /tmp/pkg-$$$$.indebs

###############################################################################################

# Tarball (get-orig-source & get-current-source)
GCLIENT_URL  := http://src.chromium.org/svn/trunk/tools/depot_tools
CHROMIUM_URL := http://src.chromium.org/svn/trunk/src
DEPS_URL     := http://src.chromium.org/svn/trunk/deps/third_party
GREEN_REV_URL := http://chromium-status.appspot.com/lkgr

# See Staying Green More Of The Time at http://dev.chromium.org/developers/how-tos/get-the-code
USE_GREEN_REV ?= 0

STRIP_TARBALL ?= 1

STRIPPED_DIRS_FROM_CO := \
	native_client \
	webkit/data/layout_tests/LayoutTests \
	third_party/WebKit/LayoutTests \
	third_party/ffmpeg/binaries/chromium \
	$(NULL)

# prefix with _ those that we can't remove (just yet) because of the gclient
# hooks (see build/all.gyp) or of some unneeded deps/includes
STRIPPED_DIRS := \
	chrome/test/data/safe_browsing/old \
	chrome/tools/test/reference_build \
	gears \
	google_update \
	o3d \
	third_party/boost \
	third_party/bsdiff \
	third_party/bspatch \
	third_party/cld \
	third_party/ffmpeg/binaries \
	third_party/fuzzymatch \
	third_party/icu38/mac \
	third_party/lcov \
	third_party/lighttpd \
	_third_party/npapi \
	third_party/nspr \
	third_party/nss \
	third_party/protobuf2 \
	third_party/pthread \
	third_party/pyftpdlib \
	third_party/simplejson \
	third_party/tcmalloc \
	webkit/data/layout_tests \
	$(NULL)

ifeq (1,$(WANT_SYSTEM_LIBS))
# Directories that will be dropped if the corresponding system lib are enabled in GYP_DEFINES
# We need to keep some files (like *.gyp) so we can't use STRIPPED_DIRS
# We can't drop third_party/zlib because we don't have contrib/minizip/*zip.h, and
# third_party/sqlite because it's a conditional build (see USE_SYSTEM_SQLITE)
STRIPPED_SYSTEM_LIB_DIRS += \
	third_party/bzip2 \
	third_party/libjpeg \
	third_party/libpng \
	third_party/libxml \
	third_party/libxslt \
	$(NULL)
endif

STRIP_SYSTEM_DIRS = \
	($(foreach DIR,$(1),$(if $(findstring use_system_$(notdir $(DIR))=1,$(GYP_DEFINES)),\
	  (cd $(2)/$(dir $(DIR)) && \
	  find $(notdir $(DIR)) -depth -mindepth 1 \! \( -name \*.gyp -o -name README.chromium -o -name \*.patch \) -print -delete );)))

TMP_DDIR     := $(DEBIAN_NAME)-$(shell echo $$$$)
ifeq (,$(LOCAL_BRANCH))
TMP_DIR      := $(TMP_DDIR)
else
TMP_DIR      := $(LOCAL_BRANCH)
endif

ifneq (,$(DEBIAN_TAG))
get-orig-source: TAG  = $(NULL)
else
ifeq (1,$(USE_GREEN_REV))
get-orig-source: TAG  = -r $(shell wget -qO - $(GREEN_REV_URL))
else
get-orig-source: TAG  = -r $(shell svn log --limit 1 $(CHROMIUM_URL) | grep ^r | head -1 | sed -e 's/^r\([^ ]*\).*/\1/')
endif
endif
get-orig-source: gos-all

get-current-source: TAG = -r $(DEBIAN_REVISION)
get-current-source: gos-all

gos-all: gos-co gos-pack
gos-co:
ifeq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DIR)
endif
	@if [ ! -d $(TMP_DIR) ] ; then echo mkdir $(TMP_DIR); mkdir $(TMP_DIR) ; fi
	@if [ ! -d $(TMP_DIR)/tools/depot_tools ] ; then \
	  echo svn co $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	  svn co $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	else \
	  echo svn update $(TMP_DIR)/tools/depot_tools ; \
	  svn update $(TMP_DIR)/tools/depot_tools ; \
	fi
	# Checkout
ifneq (,$(TAG))
	$(error gclient doesn\'t support tags)
endif
	rm -f $(TMP_DIR)/.gclient
ifeq (1,$(USE_GREEN_REV))
	cd $(TMP_DIR) && ./tools/depot_tools/gclient config $(CHROMIUM_URL) $(GREEN_REV_URL)
else
	cd $(TMP_DIR) && ./tools/depot_tools/gclient config $(CHROMIUM_URL)
endif
ifeq (1,$(STRIP_TARBALL))
ifneq (,$(STRIPPED_DIRS_FROM_CO))
	# Add exclusions in .gclient for $(STRIPPED_DIRS_FROM_CO)
	@for excl in $(STRIPPED_DIRS_FROM_CO) ; do \
	  perl -i -pe 's,("custom_deps"\s*:\s*{),$$1\n      "src/'$$excl'": None\,,' $(TMP_DIR)/.gclient ; \
	done
	grep -Ev '^($$|[[:blank:]]*#)' $(TMP_DIR)/.gclient
endif
endif
	cd $(TMP_DIR) && ./tools/depot_tools/gclient update --nohooks
ifneq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DDIR)
	cp -la $(TMP_DIR) $(TMP_DDIR)
endif
	# Hack: for x64, we need v8 from the bleeding edge branch
	rm -rf $(TMP_DDIR)/src/v8
	cd $(TMP_DDIR)/src && svn co http://v8.googlecode.com/svn/branches/bleeding_edge v8
ifeq (1,$(STRIP_TARBALL))
	# Strip tarball from some big directories not needed on the linux platform
	cd $(TMP_DDIR)/src && rm -rfv $(STRIPPED_DIRS) | grep -vE '/\.svn(/|.$$)' > REMOVED-stripped.txt
	$(call STRIP_SYSTEM_DIRS,$(STRIPPED_SYSTEM_LIB_DIRS),$(TMP_DDIR)/src) >> $(TMP_DDIR)/src/REMOVED-stripped.txt
endif
	# Remove binaries
	cd $(TMP_DDIR)/src && find . -type f \( -iname \*.exe -o -iname \*.dll -o -iname \*.pdb \) -exec rm -fv {} \; > REMOVED-bin_only.txt
	wc -l $(TMP_DDIR)/src/REMOVED-*.txt
	
gos-pack: TMP_DIR  = $(TMP_DDIR)
ifneq (,$(DEBIAN_TAG))
gos-pack: VERSION  = $(shell echo $(DEBIAN_TAG) | cut -d= -f2)
else
gos-pack: REVISION = $(shell cd $(TMP_DIR)/src && svn log --xml --limit 1 | grep -E '^( *revision=|<date>)' | tr -d '\n' | \
	             sed -e 's/.*"\([0-9]*\)".*>\(....\)-\(..\)-\(..\)T.*/\2\3\4r\1/')
gos-pack: VERSION  = $(shell cut -d= -f2 $(TMP_DIR)/src/chrome/VERSION | sed -e 's,$$,.,' | tr -d '\n' | sed -e 's/.$$//')~svn$(REVISION)
endif
gos-pack:
	# Pack
	if [ src != $(DEB_TAR_SRCDIR) ] ; then mv $(TMP_DIR)/src $(TMP_DIR)/$(DEB_TAR_SRCDIR) ; fi
	mv $(TMP_DIR)/tools/depot_tools $(TMP_DIR)/$(DEB_TAR_SRCDIR)/depot_tools
	cd $(TMP_DIR) && tar -c $(TAR_FLAGS) -f $(DEBIAN_NAME)-$(VERSION)-source.tar.$(TAR_EXT) --exclude=.svn $(DEB_TAR_SRCDIR)
	mkdir $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)
	mv $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)-source.tar.$(TAR_EXT) $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)
	cd $(TMP_DIR) && tar zcf ../$(DEBIAN_NAME)_$(VERSION).orig.tar.gz $(DEBIAN_NAME)-$(VERSION)
	rm -rf $(TMP_DIR)
	@echo "# Done (created $(DEBIAN_NAME)_$(VERSION).orig.tar.gz)"
	@ls -l $(DEBIAN_NAME)_$(VERSION).orig.tar.gz
