#!/usr/bin/make -f

DEBIAN_NAME		:= $(shell dpkg-parsechangelog | sed -n 's/^Source: *\(.*\)$$/\1/ p')
DEBIAN_VERSION		:= $(shell dpkg-parsechangelog | sed -n 's/^Version: *\(.*\)$$/\1/ p')
DEBIAN_UPSTREAM_VERSION	:= $(shell echo $(DEBIAN_VERSION) | sed 's/^\(.*\)-[^-]*$$/\1/')
DEBIAN_REVISION		:= $(shell echo $(DEBIAN_VERSION) | sed 's/^.*r\([^-]*\)-.*/\1/')

# DEB_TAR_SRCDIR has to be 'src' as this is what gyp expects :(
DEB_TAR_SRCDIR := src
SRC_DIR        := $(CURDIR)/build-tree/$(DEB_TAR_SRCDIR)
LIB_DIR        := usr/lib/$(DEBIAN_NAME)
DEB_BUILDDIR   := $(SRC_DIR)/build
DEB_SCONS_ARGS := --site-dir=../site_scons

DEBIAN_TESTSUITE := $(DEBIAN_NAME:browser=testsuite)

WANT_DEBUG       := 0
WANT_SYSTEM_LIBS := 0
WANT_SHARED_LIBS ?= 0
WANT_SANDBOXING  ?= 1
USE_SYSTEM_SCONS ?= 1
USE_SYSTEM_V8    ?= 1
VERBOSE          ?= 0

ifeq (1,$(WANT_DEBUG))
BUILD_TYPE := Debug
else
BUILD_TYPE := Release
# Add symbols
DEB_SCONS_ARGS += SYMBOLS=1
endif
DEB_SCONS_ARGS += --mode=$(BUILD_TYPE)

# Verbose?
ifeq (1,$(VERBOSE))
DEB_SCONS_ARGS += --verbose
endif

# Shared libraries
ifeq (1,$(WANT_SHARED_LIBS))
GYP_DEFINES += library=shared_library
endif

# We have some issues with gcc 4.4, use 4.3 for now
AVOID_GCC_44 ?= 1
CC_VERSION   := $(shell gcc -dumpversion | cut -d. -f-2)

ifeq (1,$(AVOID_GCC_44))
ifeq (4.4,$(CC_VERSION))
CC  := gcc-4.3
CXX := g++-4.3
export CC CXX
$(info # CC=$(CC) CXX=$(CXX))
endif
endif

# scons 0.97 (hardy) fails, switch to in-source scons if system scons < 0.98
# scons 1.2.0 (jaunty) is no longer enough since gyp landed
SCONS_VERSION := $(shell grep ^__version__ /usr/bin/scons | cut -d\" -f2)
ifneq (,$(SCONS_VERSION))
ifeq (1,$(USE_SYSTEM_SCONS))
USE_SYSTEM_SCONS := $(shell dpkg --compare-versions $(SCONS_VERSION) lt 1.2.0.d20090113; echo $$?)
endif
else
USE_SYSTEM_SCONS := 0
endif
ifeq (0,$(USE_SYSTEM_SCONS))
SCONS := ../third_party/scons/scons.py
SCONS_VERSION = $(shell grep ^__version__ $(SRC_DIR)/third_party/scons/scons.py | cut -d\" -f2)
endif

include /usr/share/cdbs/1/rules/tarball.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
include /usr/share/cdbs/1/rules/debhelper.mk
include $(CURDIR)/debian/cdbs/scons.mk

INSTALL_EXCLUDES = \
	lib \
	obj \
	opt \
	dbg \
	.sconsign.dblite \
	linker.lock \
	convert_dict \
	chrome-wrapper \
	product_logo_48.png \
	$(NULL)

# List of tests
# - prefix the name with a "-" to disable the test suite completely and
#   append a reason after a ":"
# - prefix the name with a "@" to run the test suite in xvfb-run (fake
#   X server for machines with no display hardware and no physical input
#   devices).
# - to disable one or more tests within a given testsuite,
#   append the names of the tests (using the Google Test filter syntax)
TESTS = \
	@app_unittests:-FontTest.LoadArial \
	base_unittests \
	breakpad_unittests:-ExceptionHandlerTest.ExternalDumper \
	googleurl_unittests \
	ipc_tests \
	media_unittests \
	net_perftests \
	net_unittests:-HttpNetworkLayerTest.GoogleGET:TelnetServerTest.* \
	@page_cycler_tests \
	perf_tests \
	printing_unittests \
	@startup_tests \
	@test_shell_tests \
	@ui_tests \
	unit_tests \
	$(NULL)

# FFmpeg-mt
GYP_DEFINES += use_system_ffmpeg=1
DEB_DH_SHLIBDEPS_ARGS_$(DEBIAN_NAME) := -l$(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)
FFMPEG_MT_PREFIX = $(SRC_DIR)/sconsbuild/chromium-ffmpeg
FFMPEG_MT_CONFIGURE_FLAGS = \
	--disable-ffmpeg	\
	--disable-ffplay	\
	--disable-ffserver	\
	--enable-shared		\
	--disable-static	\
	--disable-debug		\
	--enable-pthreads	\
	--disable-network	\
	--disable-encoders	\
	--disable-decoders	\
	--disable-hwaccels	\
	--disable-muxers	\
	--disable-demuxers	\
	--disable-parsers	\
	--disable-bsfs		\
	--disable-protocols	\
	--disable-devices	\
	--disable-filters	\
	--enable-decoder=theora	\
	--enable-decoder=vorbis	\
	--enable-demuxer=ogg	\
	--prefix=$(FFMPEG_MT_PREFIX)	\
	$(NULL)

ifeq (x86_64,$(DEB_BUILD_GNU_CPU))
FFMPEG_MT_CONFIGURE_FLAGS += \
	--enable-cross-compile \
	--extra-cflags=-m32 \
	--extra-ldflags=-m32 \
	$(NULL)
endif

ifneq (,$(CC))
FFMPEG_MT_CONFIGURE_FLAGS += \
	--cc=$(CC) \
	$(NULL)
endif

# System libs
# - libpng: problem with undefined references to lots of webkit_png_* symbols
# - zlib: symbols are remapped to MOZ_Z_xx for libpng
# - libevent: 2 missing symbols. Too old?
# - sqlite: unit_tests crash in browser/history/text_database.cc
ifeq (1,$(WANT_SYSTEM_LIBS))
SYSTEM_LIBS     = bzip2,libjpeg,libxml,libxslt,lzma_sdk,hunspell
DEB_SCONS_ARGS += SYSTEM_LIBS=$(SYSTEM_LIBS)
endif

# For now, build everything (inc. all test programs)
# DEB_SCONS_ARGS += all

ifeq (1,$(WANT_SANDBOXING))
GYP_DEFINES += \
	linux_sandbox_path=/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox \
	linux_sandbox_chrome_path=/$(LIB_DIR)/$(DEBIAN_NAME) \
	$(NULL)

# needed to preserve the suid and make the sandbox happy
DEB_FIXPERMS_EXCLUDE := $(DEBIAN_NAME)-sandbox
endif

# use system v8
ifeq (1,$(USE_SYSTEM_V8))
GYP_DEFINES += \
	javascript_engine=system-v8 \
	$(NULL)
endif


configure/$(DEBIAN_NAME):: debian/configure-stamp

debian/configure-stamp:
ifneq (,$(GYP_DEFINES))
	cd $(SRC_DIR) && GYP_DEFINES="$(GYP_DEFINES)" python tools/gyp/gyp_chromium build/all.gyp
else
	cd $(SRC_DIR) && python tools/gyp/gyp_chromium build/all.gyp
endif
	touch $@
	# SCONS=$(SCONS) (version $(SCONS_VERSION))
	# DEB_SCONS_ARGS=$(DEB_SCONS_ARGS)

clean::
	rm -f debian/configure-stamp

# Install: there's no install rules in scons yet, do it manually
common-install-prehook-arch:: debian/stamp-ffmpeg-build
	mkdir -p debian/tmp/$(LIB_DIR)
	( cd $(SRC_DIR)/sconsbuild/$(BUILD_TYPE) && tar $(foreach excl,$(INSTALL_EXCLUDES),--exclude=$(excl)) -cf - . ) | \
	( cd debian/tmp/$(LIB_DIR) && tar xvf - )
	# Launcher script
	mkdir -p debian/tmp/usr/bin
	cp -a debian/$(DEBIAN_NAME).sh debian/tmp/usr/bin/$(DEBIAN_NAME)
	chmod 755 debian/tmp/usr/bin/$(DEBIAN_NAME)
	# Preferences
	mkdir -p debian/tmp/etc/$(DEBIAN_NAME)
	cp -a debian/$(DEBIAN_NAME).default debian/tmp/etc/$(DEBIAN_NAME)/default
	# Rename the binary from chrome to $(DEBIAN_NAME), this is required
	# as chromium dereferences all symlinks before starting its children
	# making the Gnome System Monitor confused with icons
	mv debian/tmp/$(LIB_DIR)/chrome debian/tmp/$(LIB_DIR)/$(DEBIAN_NAME)
	mv debian/tmp/$(LIB_DIR)/chrome_sandbox debian/tmp/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
	cp -va $(FFMPEG_MT_PREFIX)/lib/*.so.* debian/tmp/$(LIB_DIR)
	# Manpage
	dh_installman -pchromium-browser debian/tmp/$(LIB_DIR)/chromium-browser.1
	rm -f debian/tmp/$(LIB_DIR)/chromium-browser.1

binary-install/$(DEBIAN_NAME)::
	mkdir -p $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/pixmaps
	cp -a build-tree/src/chrome/app/theme/chromium/product_logo_48.png $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/pixmaps/$(DEBIAN_NAME).png
	for size in 16 32 48 256 ; do \
	  mkdir -p $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/$${size}x$${size}/apps ; \
	  cp -a build-tree/src/chrome/app/theme/chromium/product_logo_$$size.png  \
	    $(CURDIR)/debian/$(DEBIAN_NAME)/usr/share/icons/hicolor/$${size}x$${size}/apps/$(DEBIAN_NAME).png ; \
	done
ifeq (1,$(WANT_SANDBOXING))
	chmod 4755 $(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
else
	rm -vf $(CURDIR)/debian/$(DEBIAN_NAME)/$(LIB_DIR)/$(DEBIAN_NAME)-sandbox
endif

# Build a custom ffmpeg from the multi-threaded branch
common-build-arch:: debian/stamp-ffmpeg-build

debian/stamp-ffmpeg-configure:
	if [ ! -d $(SRC_DIR)/ffmpeg/ffmpeg-mt ] ; then \
	  cd $(SRC_DIR)/ffmpeg ; tar zxf ffmpeg-mt.tar.gz ; \
	  cd $(SRC_DIR)/ffmpeg/ffmpeg-mt ; tar zxf ../libswscale.tar.gz ; \
	fi
	cd $(SRC_DIR)/ffmpeg/ffmpeg-mt ; \
	./configure $(FFMPEG_MT_CONFIGURE_FLAGS)
	touch $@

debian/stamp-ffmpeg-build: debian/stamp-ffmpeg-configure
	cd $(SRC_DIR)/ffmpeg/ffmpeg-mt ; $(MAKE)
	cd $(SRC_DIR)/ffmpeg/ffmpeg-mt ; $(MAKE) install
	touch $@

# Tests
binary-post-install/$(DEBIAN_TESTSUITE)::
	######################### TESTS ######################################
	# Run all possible tests from the chromium testsuite
	# Full results could be found in the '$(DEBIAN_TESTSUITE)' package
	# under /$(LIB_DIR)/test-results
	# Buildd doesn't allow network accesses so the corresponding
	# tests have to be skipped
	@chmod u+x $(CURDIR)/debian/run-test.sh
	@mkdir -p debian/$(DEBIAN_TESTSUITE)/$(LIB_DIR)/test-results
	@cd $(SRC_DIR)/sconsbuild/$(BUILD_TYPE) && \
	for test in $(TESTS) ; do \
		tname=`echo "$$test" | sed -e 's/^[-@]\?\([^:]*\).*/\1/'` ; \
		filter=`echo "$$test" | sed -e 's/^[^-][^:]*://' | grep -v -- "$$test"` ; \
		echo "==========================================================================" ; \
		if [ Z"`echo $$test | sed -e 's/^-.*//'`" = Z ] ; then \
			echo "Skipped '$$tname', reason: "`echo $$test | sed -e 's/^[^:]*://'` ; \
			continue ; \
		fi ; \
		OPT="" ; \
		if [ Z"`echo $$test | sed -e 's/^@.*//'`" = Z ] ; then \
			OPT=-x ; \
		fi ; \
		$(CURDIR)/debian/run-test.sh $$OPT ./$$tname $(CURDIR)/debian/$(DEBIAN_TESTSUITE)/$(LIB_DIR)/test-results/ $$filter || true ; \
		echo "==========================================================================" ; \
		echo ; \
	done

# Compare
PKG_DIRS = $(addprefix debian/,$(shell grep ^Package debian/control | cut -d' ' -f2))

binary-predeb/$(DEBIAN_NAME):: compare

compare:
	# Look for duplicates, fail if we find any
	@DUPES=`find $(PKG_DIRS) -type f -print | grep -v /DEBIAN/ | cut -d/ -f3- | sort | uniq -c | grep -vE '^  *1 '` ; \
	if [ "Z$$DUPES" != Z ] ; then \
	  echo " => Found duplicates:\n $$DUPES" ; \
	  exit 1 ; \
	else \
	  echo " => No duplicate found" ; \
	fi
	# Find missing
	@find $(PKG_DIRS) -type f -print | grep -v /DEBIAN/ | grep -vE '(/usr/lib/debug|/test-results/)' | \
	  grep $(LIB_DIR) | cut -d/ -f5- | sort > /tmp/pkg-$$$$.indebs ; \
	find debian/tmp/$(LIB_DIR) -type f -print | cut -d/ -f5- | grep -vE '\.log$$' | sort > /tmp/pkg-$$$$.inhammer ; \
	diff -u /tmp/pkg-$$$$.inhammer /tmp/pkg-$$$$.indebs ; \
	if [ $$? -eq 0 ] ; then \
	  echo " => All fine" ; \
	else \
	  echo " => Found differences, please investigate" ; \
	  exit 1 ; \
	fi ; \
	rm -f /tmp/pkg-$$$$.inhammer /tmp/pkg-$$$$.indebs

###############################################################################################

# Tarball (get-orig-source & get-current-source)
GCLIENT_URL  := http://src.chromium.org/svn/trunk/tools/depot_tools
CHROMIUM_URL := http://src.chromium.org/svn/trunk/src
DEPS_URL     := http://src.chromium.org/svn/trunk/deps/third_party
GREEN_REV_URL := http://chromium-status.appspot.com/lkgr

# See Staying Green More Of The Time at http://dev.chromium.org/developers/how-tos/get-the-code
USE_GREEN_REV ?= 1

USE_GCLIENT   ?= 0
STRIP_TARBALL ?= 1

STRIPPED_DIRS_FROM_CO := \
	webkit/data/layout_tests/LayoutTests \
	third_party/WebKit/LayoutTests \
	$(NULL)

STRIPPED_DIRS := \
	chrome/tools/test/reference_build \
	webkit/data/layout_tests \
	third_party/ffmpeg/binaries \
	third_party/icu38/mac \
	third_party/lighttpd/mac \
	third_party/lighttpd/win \
	o3d \
	$(NULL)

TMP_DDIR     := $(DEBIAN_NAME)-$(shell echo $$$$)
ifeq (,$(LOCAL_BRANCH))
TMP_DIR      := $(TMP_DDIR)
else
TMP_DIR      := $(LOCAL_BRANCH)
endif

ifneq (,$(DEBIAN_TAG))
get-orig-source: TAG  = $(NULL)
else
ifeq (1,$(USE_GREEN_REV))
get-orig-source: TAG  = -r $(shell wget -qO - $(GREEN_REV_URL))
else
get-orig-source: TAG  = -r $(shell svn log --limit 1 $(CHROMIUM_URL) | grep ^r | head -1 | sed -e 's/^r\([^ ]*\).*/\1/')
endif
endif
get-orig-source: gos-all

get-current-source: TAG = -r $(DEBIAN_REVISION)
get-current-source: gos-all

gos-all: gos-co gos-pack
gos-co:
ifeq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DIR)
endif
	@if [ ! -d $(TMP_DIR) ] ; then echo mkdir $(TMP_DIR); mkdir $(TMP_DIR) ; fi
	@if [ ! -d $(TMP_DIR)/tools/depot_tools ] ; then \
	  echo svn co $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	  svn co $(GCLIENT_URL) $(TMP_DIR)/tools/depot_tools ; \
	else \
	  echo svn update $(TMP_DIR)/tools/depot_tools ; \
	  svn update $(TMP_DIR)/tools/depot_tools ; \
	fi
	# Checkout
ifeq (1,$(USE_GCLIENT))
ifneq (,$(TAG))
	$(error gclient doesn\'t support tags)
endif
	rm -f $(TMP_DIR)/.gclient
ifeq (1,$(USE_GREEN_REV))
	cd $(TMP_DIR) && ./tools/depot_tools/gclient config $(CHROMIUM_URL) $(GREEN_REV_URL)
else
	cd $(TMP_DIR) && ./tools/depot_tools/gclient config $(CHROMIUM_URL)
endif
ifeq (1,$(STRIP_TARBALL))
ifneq (,$(STRIPPED_DIRS_FROM_CO))
	# Add exclusions in .gclient for $(STRIPPED_DIRS_FROM_CO)
	@for excl in $(STRIPPED_DIRS_FROM_CO) ; do \
	  perl -i -pe 's,("custom_deps"\s*:\s*{),$$1\n      "src/'$$excl'": None\,,' $(TMP_DIR)/.gclient ; \
	done
	grep -Ev '^($$|[[:blank:]]*#)' $(TMP_DIR)/.gclient
endif
endif
	cd $(TMP_DIR) && ./tools/depot_tools/gclient sync
else
	@if [ ! -d $(TMP_DIR)/src ] ; then \
	  echo svn co $(TAG) $(CHROMIUM_URL) $(TMP_DIR)/src ; \
	  svn co $(TAG) $(CHROMIUM_URL) $(TMP_DIR)/src ; \
	else \
	  echo svn update $(TAG) $(TMP_DIR)/src ; \
	  svn update $(TAG) $(TMP_DIR)/src ; \
	fi
	@for dep in `perl -pe 's,\\$$,\\\\\\$$,g; s,^([a-z]),\\$$$$1,; s,([\]}])$$,$$1;,; s,:$$, => ,; s,:\s*({|"|\[), => $$1,; s, \+ , . ,g; s,@,\\\\@,g; s/Var\("(.*?)"\)/\\$$vars->{"$$1"}/g;' $(TMP_DIR)/src/DEPS | \
	  perl -e 'local $$/ = undef; $$s = <>; eval $$s; for my $$k (sort keys %{$$$$deps_os{"unix"}}) { $$$$deps{$$k} = $$ $$deps_os{'unix'}{$$k} }; for my $$k (sort keys %$$deps) { print "$$k\"$$$$deps{$$k}\n" }'` ; do \
	  OUTDIR=`echo $$dep | cut -d\" -f1` ; \
	  found=0 ; \
	  for excl in $(STRIPPED_DIRS_FROM_CO) ; do \
	    if [ src/$$excl = $$OUTDIR ] ; then \
	      found=1 ; \
	    fi ; \
	  done ; \
	  if [ $$found -eq 1 ] ; then \
	    continue ; \
	  fi ; \
	  OUT=$(TMP_DIR)/$$OUTDIR ; \
	  if [ ! -d $$OUT ] ; then \
	    echo svn co `echo $$dep | cut -d\" -f2 | sed -e 's,^/,$(CHROMIUM_URL:trunk/src=),'` $$OUT ; \
	    svn co `echo $$dep | cut -d\" -f2 | sed -e 's,^/,$(CHROMIUM_URL:trunk/src=),'` $$OUT ; \
	  else \
	    REV=`echo $$dep | cut -d\" -f2 | grep @ | cut -d@ -f2` ; \
	    if [ "Z$$REV" != Z ] ; then REV="-r $$REV" ; fi ; \
	    echo svn update $$REV $$OUT ; \
	    svn update $$REV $$OUT ; \
	  fi ; \
	done
endif
	# we need a special FFmpeg with multi-threads, as mentionned here:
	# http://src.chromium.org/viewvc/chrome/trunk/deps/third_party/ffmpeg/README.chromium?revision=16648
	@if [ ! -d $(TMP_DIR)/src/ffmpeg ] ; then \
	  echo svn co $(DEPS_URL)/ffmpeg $(TMP_DIR)/src/ffmpeg ; \
	  svn co $(DEPS_URL)/ffmpeg $(TMP_DIR)/src/ffmpeg ; \
	else \
	  echo svn update $(TMP_DIR)/src/ffmpeg ; \
	  svn update $(TMP_DIR)/src/ffmpeg ; \
	fi
ifneq (,$(LOCAL_BRANCH))
	rm -rf $(TMP_DDIR)
	cp -la $(TMP_DIR) $(TMP_DDIR)
endif
	# Remove binaries
	cd $(TMP_DDIR)/src && find . -type f \( -iname \*.exe -o -iname \*.dll -o -iname \*.pdb \) -exec rm -fv {} \; > REMOVED-bin_only.txt
ifeq (1,$(STRIP_TARBALL))
	# Strip tarball from some big directories not needed on the linux platform
	cd $(TMP_DDIR)/src && rm -rfv $(STRIPPED_DIRS) | grep -vE '/\.svn(/|.$$)' > REMOVED-stripped.txt
	wc $(TMP_DDIR)/src/REMOVED-stripped.txt
endif
	
gos-pack: TMP_DIR  = $(TMP_DDIR)
ifneq (,$(DEBIAN_TAG))
gos-pack: VERSION  = $(shell echo $(DEBIAN_TAG) | cut -d= -f2)
else
gos-pack: REVISION = $(shell cd $(TMP_DIR)/src && svn log --xml --limit 1 | grep -E '^( *revision=|<date>)' | tr -d '\n' | \
	             sed -e 's/.*"\([0-9]*\)".*>\(....\)-\(..\)-\(..\)T.*/\2\3\4r\1/')
gos-pack: VERSION  = $(shell cut -d= -f2 $(TMP_DIR)/src/chrome/VERSION | sed -e 's,$$,.,' | tr -d '\n' | sed -e 's/.$$//')~svn$(REVISION)
endif
gos-pack:
	# Pack
	if [ src != $(DEB_TAR_SRCDIR) ] ; then mv $(TMP_DIR)/src $(TMP_DIR)/$(DEB_TAR_SRCDIR) ; fi
	mv $(TMP_DIR)/tools/depot_tools $(TMP_DIR)/$(DEB_TAR_SRCDIR)/depot_tools
	cd $(TMP_DIR) && tar jcf $(DEBIAN_NAME)-$(VERSION)-source.tar.bz2 --exclude=.svn $(DEB_TAR_SRCDIR)
	mkdir $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)
	mv $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)-source.tar.bz2 $(TMP_DIR)/$(DEBIAN_NAME)-$(VERSION)
	cd $(TMP_DIR) && tar zcf ../$(DEBIAN_NAME)_$(VERSION).orig.tar.gz $(DEBIAN_NAME)-$(VERSION)
	rm -rf $(TMP_DIR)
	@echo "# Done (created $(DEBIAN_NAME)_$(VERSION).orig.tar.gz)"
	@ls -l $(DEBIAN_NAME)_$(VERSION).orig.tar.gz
